AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create a new VPC
  or use an existing VPC for  deployment

Mappings:
  RegionMap:
    us-east-1:
      "64": ami-97785bed
    us-east-2:
      "64": ami-f63b1193
    us-west-1:
      "64": ami-824c4ee2
    us-west-2:
      "64": ami-f2d3638a
    ca-central-1:
      "64": ami-a954d1cd
    eu-west-1:
      "64": ami-d834aba1
    eu-west-2:
      "64": ami-403e2524
    eu-west-3:
      "64": ami-8ee056f3
    eu-central-1:
      "64": ami-5652ce39
    ap-northeast-1:
      "64": ami-ceafcba8
    ap-northeast-2:
      "64": ami-863090e8
    ap-southeast-1:
      "64": ami-942dd1f6
    ap-southeast-2:
      "64": ami-942dd1f6
    ap-south-1:
      "64": ami-531a4c3c
    sa-east-1:
      "64": ami-84175ae8
  NodeNames:
    parity:
      name: ethereum
      path: parity
    v1:
      name: orbs
      path: orbs
  EthereumChains:
    production:
      name: mainnet
    staging:
      name: ropsten

Parameters:
  KeyName:
    Type: String
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in your cluster.
    Default: ''
  InstanceType:
    Type: CommaDelimitedList
    Description: >
      Specifies the EC2 instance type for your container instances.
      Defaults to m4.large
    Default: m5.large
    ConstraintDescription: must be a valid EC2 instance type.
  AmiId:
    Type: String
    Description: Specifies the AMI ID for your container instances.
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 1.
    Default: '1'
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances. If you specify a VPC ID, you must specify a list of
      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created
      with atleast 1 subnet.
    Default: ''
    AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
    ConstraintDescription: >
      VPC Id must begin with 'vpc-' or leave blank to have a
      new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >
      Optional - Specifies the Comma separated list of existing VPC Subnet
      Ids where  instances will run
    Default: ''
  SecurityGroupId:
    Type: String
    Description: >
      Optional - Specifies the Security Group Id of an existing Security
      Group. Leave blank to have a new Security Group created
    Default: ''
  VpcCidr:
    Type: String
    Description: Optional - Specifies the CIDR Block of VPC
    Default: ''
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: ''
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: ''
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: ''
  IamRoleInstanceProfile:
    Type: String
    Description: >
      Specifies the Name or the Amazon Resource Name (ARN) of the instance
      profile associated with the IAM role for the instance
    Default: ''
  SecurityIngressFromPort:
    Type: Number
    Description: >
      Optional - Specifies the Start of Security Group port to open on
       instances - defaults to port 0
    Default: '0'
  SecurityIngressToPort:
    Type: Number
    Description: >
      Optional - Specifies the End of Security Group port to open on
      instances - defaults to port 65535
    Default: '65535'
  PublicAPICidrIp:
    Type: String
    Description: >
      Public API addresses.
    Default: 0.0.0.0/0
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs, of the newly created Amazon
      Elastic Block Store (Amazon EBS) volume
    Default: '0'
  EbsVolumeType:
    Type: String
    Description: Optional - Specifies the Type of (Amazon EBS) volume
    Default: ''
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  DeviceName:
    Type: String
    Description: Optional - Specifies the device mapping for the Volume
    Default: ''
  CreateNewVPC:
    Type: String
    Default: 'true'
  EthereumElasticIP:
    Type: String
    Default: ''
  DockerTag:
    Type: String
    Default: 'master'
  NodeName:
    Type: String
    Default: ''
  NodeEnv:
    Type: String
    Default: 'staging'
  Bootstrap:
    Type: String
    Default: 'v1'
  DockerImage:
    Type: String
    Default: ''
  SecretMessageKey:
    Type: String
    NoEcho: true
    Default: 'dummy-secret-message-key'
  SecretBlockKey:
    Type: String
    NoEcho: true
    Default: 'dummy-secret-block-key'

Conditions:
  CreateEC2LCWithKeyPair:
    !Not [!Equals [!Ref KeyName, '']]
  CreateNewSecurityGroup:
    !Equals [!Ref SecurityGroupId, '']
  CreateNewVpc: !Or
    - !Equals [!Ref VpcId, '']
    - !Equals [!Ref CreateNewVPC, 'true']
  CreateSubnet1: !And
    - !Not [!Equals [!Ref SubnetCidr1, '']]
    - !Condition CreateNewVpc
  CreateSubnet2: !And
    - !Not [!Equals [!Ref SubnetCidr2, '']]
    - !Condition CreateSubnet1
  CreateSubnet3: !And
    - !Not [!Equals [!Ref SubnetCidr3, '']]
    - !Condition CreateSubnet2
  CreateEbsVolume: !And
    - !Not [!Equals [!Ref EbsVolumeSize, '0']]
    - !Not [!Equals [!Ref EbsVolumeType, '']]
    - !Not [!Equals [!Ref DeviceName, '']]
  UseCustomAMI: !Not [!Equals [!Ref AmiId, '']]
  ImportEthereumElasticIP: !Equals [!Ref EthereumElasticIP, '']
  ImportDockerImage: !Equals [!Ref DockerImage, '']
Resources:
  Vpc:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PubSubnetAz1:
    Condition: CreateSubnet1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
  PubSubnetAz3:
    Condition: CreateSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
  InternetGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  PubSubnet3RouteTableAssociation:
    Condition: CreateSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz3
      RouteTableId: !Ref RouteViaIgw
  SecurityGroup:
    Condition: CreateNewSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Allowed Ports
      VpcId: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]
      SecurityGroupIngress:
        <% _.each(sshCidr, function(ip) { %>
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%= ip %>
        <% }); %>
        <% _.each(peersCidr, function(ip) { %>
        - IpProtocol: tcp
          FromPort: 60001
          ToPort: 60001
          CidrIp: <%= ip %>
        <% }); %>
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicAPICidrIp
        - IpProtocol: tcp
          FromPort: 8545
          ToPort: 8545
          CidrIp:
            Fn::Join:
              - "/"
              - - Fn::ImportValue: !Join ["-", ["orbs-node-elastic-ip-value", !Ref NodeEnv, !Ref "AWS::Region"]]
                - "32"
  InstanceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !If [ UseCustomAMI, !Ref AmiId, !FindInMap [ RegionMap, !Ref "AWS::Region", 64 ] ]
      InstanceType: !Select [ 0, !Ref InstanceType ]
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Fn::ImportValue: !Join ["-", ["orbs-network-instance-profile", !Ref NodeEnv, !Ref "AWS::Region"]]
      KeyName: !If [ CreateEC2LCWithKeyPair, !Ref KeyName, !Ref "AWS::NoValue" ]
      SecurityGroups: [ !If [ CreateNewSecurityGroup, !Ref SecurityGroup, !Ref SecurityGroupId ] ]
      BlockDeviceMappings: !If
        - CreateEbsVolume
        -
          - DeviceName: !Ref DeviceName
            Ebs:
             VolumeSize: !Ref EbsVolumeSize
             VolumeType: !Ref EbsVolumeType
        - !Ref "AWS::NoValue"
      UserData:
        Fn::Base64: !Sub
          - |
           #!/bin/bash -xe
           yum install -y aws-cfn-bootstrap

           # Install the files and packages from the metadata
           /opt/aws/bin/cfn-init -v --stack ${AWS_STACK_NAME} \
            --resource InstanceLaunchConfiguration \
            --configsets install_and_bootstrap \
            --region ${AWS_REGION}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS_STACK_NAME} \
              --resource InstanceLaunchConfiguration \
              --region ${AWS_REGION}
          - AWS_REGION: !Ref "AWS::Region"
            AWS_STACK_NAME: !Ref "AWS::StackName"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_and_bootstrap:
            - install
            - provision_keys
            - bootstrap
          bootstrap:
            - provision_keys
            - bootstrap
        install:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |
                  [main]
                  stack=${AWS_STACK_ID}
                  region=${AWS_REGION}
                  interval=5
                - AWS_REGION: !Ref "AWS::Region"
                  AWS_STACK_ID: !Ref "AWS::StackId"
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.InstanceLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS_STACK_NAME} --resource InstanceLaunchConfiguration --configsets bootstrap --region ${AWS_REGION}
                  runas=root
                - AWS_REGION: !Ref "AWS::Region"
                  AWS_STACK_NAME: !Ref "AWS::StackId"
            /opt/scripts/format.sh:
              content: |
                #!/bin/bash
                export DATA_PATH=/mnt/data/
                mkdir -p $DATA_PATH

                mkfs.ext3 -F /dev/xvdc
                mount /dev/xvdc $DATA_PATH

                service docker restart
          commands:
            001_format_disk:
              command: bash -x /opt/scripts/format.sh
              ignoreErrors: true
        provision_keys:
          files:
            /opt/orbs/private-keys/message/secret-key:
              content: !Ref SecretMessageKey
              mode: "000400"
              # TODO: change later to whatever user we use inside the container
              owner: root
            /opt/orbs/private-keys/block/secret-key:
              content: !Ref SecretBlockKey
              mode: "000400"
              # TODO: change later to whatever user we use inside the container
              owner: root
        bootstrap:
          commands:
            001_run_update:
              command: /opt/scripts/update.sh
          files:
            /opt/scripts/update.sh:
              mode: "00700"
              owner: root
              content: !Sub
                - |
                  #!/bin/bash -xe
                  export EIP=${EIP} DOCKER_TAG=${DOCKER_TAG} NODE_IP=${NODE_IP} NODE_NAME=${NODE_NAME} NODE_ENV=${NODE_ENV} REGION=${REGION} DOCKER_IMAGE=${DOCKER_IMAGE} S3_CONFIG=${S3_CONFIG} ETHEREUM_NODE_HTTP_ADDRESS=http://${ETHEREUM_NODE_IP}:8545 ETHEREUM_CHAIN=${ETHEREUM_CHAIN}
                  hostname ${NODE_NAME}
                  aws s3 sync s3://${S3_CONFIG}/${BOOTSTRAP}/ /opt/${BOOTSTRAP_PATH}/
                  bash -x /opt/${BOOTSTRAP_PATH}/bootstrap.sh &>> /var/log/orbs-bootstrap.log
                - EIP:
                    Fn::ImportValue: !Join ["-", [!FindInMap [ NodeNames, !Ref Bootstrap, "name" ], "node-elastic-ip", !Ref NodeEnv, !Ref "AWS::Region"]]
                  NODE_IP:
                    Fn::ImportValue: !Join ["-", [!FindInMap [ NodeNames, !Ref Bootstrap, "name" ], "node-elastic-ip-value", !Ref NodeEnv, !Ref "AWS::Region"]]
                  NODE_NAME: !Join ["-", [!FindInMap [ NodeNames, !Ref Bootstrap, "name" ], "global", !Ref "AWS::AccountId", !Ref NodeEnv, !Ref "AWS::Region"]]
                  ETHEREUM_NODE_IP: !If
                    - ImportEthereumElasticIP
                    - Fn::ImportValue: !Join ["-", ["ethereum-node-elastic-ip-value", !Ref NodeEnv, !Ref "AWS::Region"]]
                    - !Ref EthereumElasticIP
                  DOCKER_TAG: !Ref DockerTag
                  DOCKER_IMAGE: !If
                    - ImportDockerImage
                    - Fn::ImportValue: !Join ["-", ["orbs-repository", !Ref NodeEnv, !Ref "AWS::Region"]]
                    - !Ref DockerImage
                  NODE_ENV: !Ref NodeEnv
                  REGION: !Ref "AWS::Region"
                  BOOTSTRAP: !Ref Bootstrap
                  BOOTSTRAP_PATH: !FindInMap [ NodeNames, !Ref Bootstrap, "path" ]
                  S3_CONFIG:
                    Fn::ImportValue: !Join ["-", ["orbs-network-s3-bucket", !Ref NodeEnv, !Ref "AWS::Region"]]
                  ETHEREUM_CHAIN: !FindInMap [ EthereumChains , !Ref NodeEnv, "name" ]

  InstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If
        - CreateSubnet1
        - !If
          - CreateSubnet2
          - !If
            - CreateSubnet3
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}" ]
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}" ]
          - [ !Sub "${PubSubnetAz1}" ]
        - !Ref SubnetIds
      LaunchConfigurationName: !Ref InstanceLaunchConfiguration
      MinSize: '0'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        -
          Key: Name
          Value: !Join ["-", [!FindInMap [ NodeNames, !Ref Bootstrap, "name" ], "global", !Ref "AWS::AccountId", !Ref NodeEnv, !Ref "AWS::Region"]]
          PropagateAtLaunch: 'true'
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through console"
          PropagateAtLaunch: 'true'

Outputs:
  InstanceAsgName:
    Description: Auto Scaling Group Name for  Instances
    Value: !Ref InstanceAsg
  TemplateVersion:
    Description: The version of the template used by
    Value: '1.0.0'
