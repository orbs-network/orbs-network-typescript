AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates ECR, roles, reserves Elastic IPs
Parameters:
  DNSZone:
    Type: String
    Description: >
      Specifies a name of DNS zone to which Elastic IP is going to be bound
    Default: ''
  NodeEnv:
    Type: String
    Description: >
      production/staging/whatever
    Default: staging
  BucketName:
    Type: String
    Default: orbs-network-config

Conditions:
  HasDNSZone: !Not [!Equals [!Ref DNSZone, '']]

# TODO: limit associate address to a certain namespace
Resources:
  NetworkAssociateAddressPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": "ec2:AssociateAddress",
              "Resource": "*"
            }
          ]
        }
      PolicyName: !Join ["-", ["AssociateAddressPolicy", !Ref NodeEnv, !Ref "AWS::Region"]]
      Roles:
        - !Ref NetworkRole

  NetworkS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref BucketName, !Ref NodeEnv, !Ref "AWS::Region"]]

  # TODO: only give access to region bucket
  # TODO: different infrastructure for parity node
  NetworkAccessS3Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:AbortMultipartUpload",
                "s3:ListBucket",
                "s3:DeleteObject",
                "s3:GetBucketLocation",
                "s3:GetObjectVersion"
              ],
              "Resource": [
                !Join ["", ["arn:aws:s3:::", !Ref BucketName, "-", !Ref NodeEnv, "-", !Ref "AWS::Region", ""]],
                !Join ["", ["arn:aws:s3:::", !Ref BucketName, "-", !Ref NodeEnv, "-", !Ref "AWS::Region", "/*"]]
              ]
            },
            {
              "Sid": "VisualEditor1",
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets",
                "s3:HeadBucket",
                "s3:ListObjects"
              ],
              "Resource": "*"
            }
          ]
        }
      PolicyName: !Join ["-", ["AccessS3Policy", !Ref NodeEnv, !Ref "AWS::Region"]]
      Roles:
        - !Ref NetworkRole

  NetworkRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Join ["-", ["orbs-network-role", !Ref NodeEnv, !Ref "AWS::Region"]]

  NetworkInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref NetworkRole
      InstanceProfileName: !Join ["-", ["orbs-network-instance-profile", !Ref "AWS::Region"]]

  Repository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Join ["-", ["orbs-network", !Ref NodeEnv, !Ref "AWS::Region"]]

  NodeElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  EthereumNodeElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NodeDomainName:
    Type: AWS::Route53::RecordSet
    Condition: HasDNSZone
    Properties:
      HostedZoneName: !Join ["", [!Ref DNSZone, "."]]
      Name: !Join [".", [!Ref "AWS::Region", "global.nodes", !Ref NodeEnv, !Ref DNSZone, ""]]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref NodeElasticIP

  EthereumNodeDomainName:
    Type: AWS::Route53::RecordSet
    Condition: HasDNSZone
    Properties:
      HostedZoneName: !Join ["", [!Ref DNSZone, "."]]
      Name: !Join [".", ["ethereum", !Ref "AWS::Region", "global.services", !Ref NodeEnv, !Ref DNSZone, ""]]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EthereumNodeElasticIP

Outputs:
  NetworkRole:
    Value: !Ref NetworkRole
    Export:
      Name: !Join ["-", ["orbs-network-role", !Ref NodeEnv, !Ref "AWS::Region"]]

  NetworkInstanceProfile:
    Value: !Ref NetworkInstanceProfile
    Export:
      Name: !Join ["-", ["orbs-network-instance-profile", !Ref NodeEnv, !Ref "AWS::Region"]]

  Repository:
    Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref Repository ] ] ] ]
    Export:
      Name: !Join ["-", ["orbs-repository", !Ref NodeEnv, !Ref "AWS::Region"]]

  NodeElasticIP:
    Value: !GetAtt NodeElasticIP.AllocationId
    Export:
      Name: !Join ["-", ["orbs-node-elastic-ip", !Ref NodeEnv, !Ref "AWS::Region"]]

  EthereumNodeElasticIP:
    Value: !GetAtt EthereumNodeElasticIP.AllocationId
    Export:
      Name: !Join ["-", ["ethereum-node-elastic-ip", !Ref NodeEnv, !Ref "AWS::Region"]]

  EthereumNodeElasticIPValue:
    Value: !GetAtt EthereumNodeElasticIP.AllocationId
    Export:
      Name: !Join ["-", ["ethereum-node-elastic-ip-value", !Ref NodeEnv, !Ref "AWS::Region"]]

  NodeDomainName:
    Condition: HasDNSZone
    Value: !Ref NodeDomainName
    Export:
      Name: !Join ["-", ["orbs-node-domain-name", !Ref NodeEnv, !Ref "AWS::Region"]]

  EthereumNodeDomainName:
    Condition: HasDNSZone
    Value: !Ref EthereumNodeDomainName
    Export:
      Name: !Join ["-", ["ethereum-node-domain-name", !Ref NodeEnv, !Ref "AWS::Region"]]

  NetworkS3Bucket:
    Value: !Ref NetworkS3Bucket
    Export:
      Name: !Join ["-", ["orbs-network-s3-bucket", !Ref NodeEnv, !Ref "AWS::Region"]]

  TemplateVersion:
    Description: The version of the template used by
    Value: '1.0.0'
