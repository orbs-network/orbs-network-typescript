/** Declaration file generated by dts-gen */

export class ec {
  constructor(options: any);

  genKeyPair(options: any): any;

  getKeyRecoveryParam(e: any, signature: any, Q: any, enc: any): any;

  keyFromPrivate(priv: any, enc: any): any;

  keyFromPublic(pub: any, enc: any): any;

  keyPair(options: any): any;

  recoverPubKey(msg: any, signature: any, j: any, enc: any): any;

  sign(msg: any, key: any, enc: any, options: any): any;

  verify(msg: any, signature: any, key: any, enc: any): any;

}

export class eddsa {
  constructor(curve: any);

  decodeInt(bytes: any): any;

  decodePoint(bytes: any): any;

  encodeInt(num: any): any;

  encodePoint(point: any): any;

  hashInt(...args: any[]): any;

  isPoint(val: any): any;

  keyFromPublic(pub: any): any;

  keyFromSecret(secret: any): any;

  makeSignature(sig: any): any;

  sign(message: any, secret: any): any;

  verify(message: any, sig: any, pub: any): any;

}

export const version: string;

export function rand(len: any): any;

export namespace curve {
  class base {
      constructor(type: any, conf: any);

      decodePoint(bytes: any, enc: any): any;

      point(): void;

      validate(): void;

  }

  class edwards {
      constructor(conf: any);

      jpoint(x: any, y: any, z: any, t: any): any;

      point(x: any, y: any, z: any, t: any): any;

      pointFromJSON(obj: any): any;

      pointFromX(x: any, odd: any): any;

      pointFromY(y: any, odd: any): any;

      validate(point: any): any;

  }

  class mont {
      constructor(conf: any);

      decodePoint(bytes: any, enc: any): any;

      point(x: any, z: any): any;

      pointFromJSON(obj: any): any;

      validate(point: any): any;

  }

  namespace base {
      class BasePoint {
          constructor(curve: any, type: any);

          dblp(k: any): any;

          encode(enc: any, compact: any): any;

          encodeCompressed(enc: any): any;

          eq(): void;

          precompute(power: any): any;

          validate(): any;

      }

      namespace BasePoint {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const encode: any;

              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const eq: any;

              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curve.base.BasePoint.prototype
              const validate: any;

          }

      }

      namespace prototype {
          function decodePoint(bytes: any, enc: any): any;

          function point(): void;

          function validate(): void;

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curve.base.prototype.decodePoint
              const prototype: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curve.base.prototype.point
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curve.base.prototype.validate
              const prototype: any;

          }

      }

  }

  namespace edwards {
      namespace prototype {
          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any, t: any): any;

          function point(x: any, y: any, z: any, t: any): any;

          function pointFromJSON(obj: any): any;

          function pointFromX(x: any, odd: any): any;

          function pointFromY(y: any, odd: any): any;

          function validate(point: any): any;

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.decodePoint
              const prototype: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.jpoint
              const prototype: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.pointFromX
              const prototype: any;

          }

          namespace pointFromY {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.pointFromY
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curve.edwards.prototype.validate
              const prototype: any;

          }

      }

  }

  namespace mont {
      namespace prototype {
          function decodePoint(bytes: any, enc: any): any;

          function point(x: any, z: any): any;

          function pointFromJSON(obj: any): any;

          function validate(point: any): any;

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curve.mont.prototype.decodePoint
              const prototype: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curve.mont.prototype.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curve.mont.prototype.pointFromJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curve.mont.prototype.validate
              const prototype: any;

          }

      }

  }

}

export namespace curves {
  function PresetCurve(options: any): void;

  namespace PresetCurve {
      const prototype: {
      };

  }

  namespace curve25519 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const type: string;

          function decodePoint(bytes: any, enc: any): any;

          function point(x: any, z: any): any;

          function pointFromJSON(obj: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a
              const zeroBits: any;

          }

          namespace a24 {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.a24
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const diffAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const jumlAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const normalize: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.g
              const z: any;

          }

          namespace i4 {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.i4
              const zeroBits: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.pointFromJSON
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.redN
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const precomputed: any;

          const type: string;

          function add(): void;

          function dbl(): any;

          function dblp(k: any): any;

          function diffAdd(p: any, diff: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(other: any): any;

          function getX(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jumlAdd(): void;

          function mul(k: any): any;

          function mulAdd(): void;

          function normalize(): any;

          function precompute(): void;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const a24: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const i4: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.curve
              const zero: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.dblp
              const prototype: any;

          }

          namespace diffAdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.diffAdd
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.getX
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.isInfinity
              const prototype: any;

          }

          namespace jumlAdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.jumlAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.mulAdd
              const prototype: any;

          }

          namespace normalize {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.normalize
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.precompute
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.x
              const zeroBits: any;

          }

          namespace z {
              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.g.z
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.curve25519.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.curve25519.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.curve25519.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace ed25519 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const extended: boolean;

          const mOneA: boolean;

          const oneC: boolean;

          const twisted: boolean;

          const type: string;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any, t: any): any;

          function point(x: any, y: any, z: any, t: any): any;

          function pointFromJSON(obj: any): any;

          function pointFromX(x: any, odd: any): any;

          function pointFromY(y: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.a
              const zeroBits: any;

          }

          namespace c {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c
              const zeroBits: any;

          }

          namespace c2 {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.c2
              const zeroBits: any;

          }

          namespace d {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.d
              const zeroBits: any;

          }

          namespace dd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.dd
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const eqXToP: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const mixedAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const normalize: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const t: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const toP: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const y: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const z: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.g
              const zOne: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.pointFromX
              const prototype: any;

          }

          namespace pointFromY {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.pointFromY
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.redN
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const precomputed: any;

          const type: string;

          const zOne: boolean;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(other: any): any;

          function eqXToP(x: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p: any, k2: any): any;

          function mixedAdd(p: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p: any, k2: any): any;

          function neg(): any;

          function normalize(): any;

          function precompute(power: any): any;

          function toP(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const c: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const c2: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const d: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const dd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const extended: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const mOneA: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const oneC: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const pointFromY: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const twisted: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.curve
              const zero: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.eq
              const prototype: any;

          }

          namespace eqXToP {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.eqXToP
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.jmulAdd
              const prototype: any;

          }

          namespace mixedAdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.mixedAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.neg
              const prototype: any;

          }

          namespace normalize {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.normalize
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.precompute
              const prototype: any;

          }

          namespace t {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.t
              const zeroBits: any;

          }

          namespace toP {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.toP
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.y
              const zeroBits: any;

          }

          namespace z {
              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.g.z
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.ed25519.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.ed25519.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.ed25519.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace p192 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: any;

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: any;

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p192.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.p192.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.p192.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.p192.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.p192.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p192.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.p192.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.p192.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p192.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.p192.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.p192.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p192.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.p192.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p192.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.p192.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.p192.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p192.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p192.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p192.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.p192.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.p192.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.p192.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p192.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.p192.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.p192.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.p192.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.p192.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.p192.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.p192.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.p192.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.p192.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.p192.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p192.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.p192.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.p192.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.p192.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.p192.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.p192.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.p192.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.p192.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p192.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.p192.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.p192.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.p192.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.p192.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.p192.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p192.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.p192.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.p192.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p192.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.p192.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.p192.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.p192.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.p192.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.p192.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.p192.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.p192.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.p192.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.p192.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.p192.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.p192.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.p192.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace p224 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: any;

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: any;

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p224.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.p224.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.p224.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.p224.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.p224.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p224.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.p224.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.p224.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p224.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.p224.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.p224.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p224.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.p224.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p224.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.p224.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.p224.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p224.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p224.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p224.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.p224.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.p224.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.p224.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p224.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.p224.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.p224.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.p224.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.p224.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.p224.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.p224.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.p224.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.p224.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.p224.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p224.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.p224.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.p224.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.p224.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.p224.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.p224.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.p224.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.p224.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p224.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.p224.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.p224.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.p224.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.p224.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.p224.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p224.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.p224.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.p224.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p224.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.p224.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.p224.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.p224.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.p224.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.p224.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.p224.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.p224.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.p224.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.p224.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.p224.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.p224.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.p224.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace p256 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: any;

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const minv: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const r: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const r2: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const rinv: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const shift: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: any;

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p256.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.p256.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.p256.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.p256.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.p256.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p256.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.p256.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.p256.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p256.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.p256.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.p256.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p256.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.p256.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p256.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.p256.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.p256.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p256.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p256.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p256.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.p256.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.p256.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.p256.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p256.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.p256.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.p256.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.p256.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.p256.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.p256.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.p256.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.p256.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.p256.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.p256.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p256.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.p256.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.p256.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.p256.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.p256.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.p256.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.p256.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.p256.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p256.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.p256.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.p256.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.p256.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.p256.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.p256.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p256.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.p256.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.p256.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p256.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.p256.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.p256.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.p256.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.p256.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.p256.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.p256.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.p256.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.p256.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.p256.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.p256.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.p256.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.p256.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace p384 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: any;

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const minv: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const r: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const r2: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const rinv: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const shift: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: any;

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p384.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.p384.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.p384.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.p384.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.p384.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p384.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.p384.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.p384.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p384.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.p384.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.p384.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p384.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.p384.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p384.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.p384.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.p384.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p384.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p384.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p384.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.p384.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.p384.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.p384.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p384.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.p384.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.p384.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.p384.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.p384.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.p384.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.p384.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.p384.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.p384.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.p384.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p384.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.p384.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.p384.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.p384.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.p384.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.p384.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.p384.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.p384.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p384.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.p384.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.p384.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.p384.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.p384.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.p384.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p384.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.p384.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.p384.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p384.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.p384.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.p384.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.p384.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.p384.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.p384.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.p384.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.p384.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.p384.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.p384.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.p384.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.p384.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.p384.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace p521 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: any;

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const minv: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const r: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const r2: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const rinv: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const shift: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: any;

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p521.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.p521.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.p521.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.p521.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.p521.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p521.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.p521.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.p521.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p521.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.p521.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.p521.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p521.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.p521.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p521.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.p521.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.p521.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p521.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.p521.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.p521.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.p521.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.p521.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.p521.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.p521.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.p521.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.p521.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.p521.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.p521.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.p521.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.p521.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.p521.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.p521.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.p521.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.p521.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.p521.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.p521.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.p521.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.p521.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.p521.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.p521.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.p521.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.p521.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.p521.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.p521.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.p521.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.p521.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.p521.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.p521.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.p521.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.p521.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.p521.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.p521.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.p521.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.p521.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.p521.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.p521.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.p521.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.p521.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.p521.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.p521.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.p521.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.p521.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.p521.n.zeroBits
              const prototype: any;

          }

      }

  }

  namespace secp256k1 {
      class hash {
          constructor();

          static blockSize: number;

          static hmacStrength: number;

          static outSize: number;

          static padLength: number;

      }

      namespace curve {
          const endo: {
              basis: {
                  a: {
                      abs: any;
                      add: any;
                      addn: any;
                      and: any;
                      andln: any;
                      bincn: any;
                      bitLength: any;
                      byteLength: any;
                      clone: any;
                      cmp: any;
                      cmpn: any;
                      copy: any;
                      div: any;
                      divRound: any;
                      divmod: any;
                      divn: any;
                      egcd: any;
                      eq: any;
                      eqn: any;
                      forceRed: any;
                      fromRed: any;
                      fromTwos: any;
                      gcd: any;
                      gt: any;
                      gte: any;
                      gten: any;
                      gtn: any;
                      iabs: any;
                      iadd: any;
                      iaddn: any;
                      iand: any;
                      idivn: any;
                      imaskn: any;
                      imul: any;
                      imuln: any;
                      ineg: any;
                      inotn: any;
                      inspect: any;
                      invm: any;
                      ior: any;
                      isEven: any;
                      isNeg: any;
                      isOdd: any;
                      isZero: any;
                      ishln: any;
                      ishrn: any;
                      isqr: any;
                      isub: any;
                      isubn: any;
                      iuand: any;
                      iuor: any;
                      iushln: any;
                      iushrn: any;
                      iuxor: any;
                      ixor: any;
                      length: number;
                      lt: any;
                      lte: any;
                      lten: any;
                      ltn: any;
                      maskn: any;
                      mod: any;
                      modn: any;
                      mul: any;
                      mulTo: any;
                      mulf: any;
                      muln: any;
                      neg: any;
                      negative: number;
                      notn: any;
                      or: any;
                      pow: any;
                      red: any;
                      redAdd: any;
                      redIAdd: any;
                      redIMul: any;
                      redISqr: any;
                      redISub: any;
                      redInvm: any;
                      redMul: any;
                      redNeg: any;
                      redPow: any;
                      redShl: any;
                      redSqr: any;
                      redSqrt: any;
                      redSub: any;
                      setn: any;
                      shln: any;
                      shrn: any;
                      sqr: any;
                      strip: any;
                      sub: any;
                      subn: any;
                      testn: any;
                      toArray: any;
                      toArrayLike: any;
                      toBuffer: any;
                      toJSON: any;
                      toNumber: any;
                      toRed: any;
                      toString: any;
                      toTwos: any;
                      uand: any;
                      ucmp: any;
                      umod: any;
                      uor: any;
                      ushln: any;
                      ushrn: any;
                      uxor: any;
                      words: number[];
                      xor: any;
                      zeroBits: any;
                  };
                  b: {
                      abs: any;
                      add: any;
                      addn: any;
                      and: any;
                      andln: any;
                      bincn: any;
                      bitLength: any;
                      byteLength: any;
                      clone: any;
                      cmp: any;
                      cmpn: any;
                      copy: any;
                      div: any;
                      divRound: any;
                      divmod: any;
                      divn: any;
                      egcd: any;
                      eq: any;
                      eqn: any;
                      forceRed: any;
                      fromRed: any;
                      fromTwos: any;
                      gcd: any;
                      gt: any;
                      gte: any;
                      gten: any;
                      gtn: any;
                      iabs: any;
                      iadd: any;
                      iaddn: any;
                      iand: any;
                      idivn: any;
                      imaskn: any;
                      imul: any;
                      imuln: any;
                      ineg: any;
                      inotn: any;
                      inspect: any;
                      invm: any;
                      ior: any;
                      isEven: any;
                      isNeg: any;
                      isOdd: any;
                      isZero: any;
                      ishln: any;
                      ishrn: any;
                      isqr: any;
                      isub: any;
                      isubn: any;
                      iuand: any;
                      iuor: any;
                      iushln: any;
                      iushrn: any;
                      iuxor: any;
                      ixor: any;
                      length: number;
                      lt: any;
                      lte: any;
                      lten: any;
                      ltn: any;
                      maskn: any;
                      mod: any;
                      modn: any;
                      mul: any;
                      mulTo: any;
                      mulf: any;
                      muln: any;
                      neg: any;
                      negative: number;
                      notn: any;
                      or: any;
                      pow: any;
                      red: any;
                      redAdd: any;
                      redIAdd: any;
                      redIMul: any;
                      redISqr: any;
                      redISub: any;
                      redInvm: any;
                      redMul: any;
                      redNeg: any;
                      redPow: any;
                      redShl: any;
                      redSqr: any;
                      redSqrt: any;
                      redSub: any;
                      setn: any;
                      shln: any;
                      shrn: any;
                      sqr: any;
                      strip: any;
                      sub: any;
                      subn: any;
                      testn: any;
                      toArray: any;
                      toArrayLike: any;
                      toBuffer: any;
                      toJSON: any;
                      toNumber: any;
                      toRed: any;
                      toString: any;
                      toTwos: any;
                      uand: any;
                      ucmp: any;
                      umod: any;
                      uor: any;
                      ushln: any;
                      ushrn: any;
                      uxor: any;
                      words: number[];
                      xor: any;
                      zeroBits: any;
                  };
              }[];
              beta: {
                  abs: any;
                  add: any;
                  addn: any;
                  and: any;
                  andln: any;
                  bincn: any;
                  bitLength: any;
                  byteLength: any;
                  clone: any;
                  cmp: any;
                  cmpn: any;
                  copy: any;
                  div: any;
                  divRound: any;
                  divmod: any;
                  divn: any;
                  egcd: any;
                  eq: any;
                  eqn: any;
                  forceRed: any;
                  fromRed: any;
                  fromTwos: any;
                  gcd: any;
                  gt: any;
                  gte: any;
                  gten: any;
                  gtn: any;
                  iabs: any;
                  iadd: any;
                  iaddn: any;
                  iand: any;
                  idivn: any;
                  imaskn: any;
                  imul: any;
                  imuln: any;
                  ineg: any;
                  inotn: any;
                  inspect: any;
                  invm: any;
                  ior: any;
                  isEven: any;
                  isNeg: any;
                  isOdd: any;
                  isZero: any;
                  ishln: any;
                  ishrn: any;
                  isqr: any;
                  isub: any;
                  isubn: any;
                  iuand: any;
                  iuor: any;
                  iushln: any;
                  iushrn: any;
                  iuxor: any;
                  ixor: any;
                  length: number;
                  lt: any;
                  lte: any;
                  lten: any;
                  ltn: any;
                  maskn: any;
                  mod: any;
                  modn: any;
                  mul: any;
                  mulTo: any;
                  mulf: any;
                  muln: any;
                  neg: any;
                  negative: number;
                  notn: any;
                  or: any;
                  pow: any;
                  red: {
                      add: any;
                      convertFrom: any;
                      convertTo: any;
                      iadd: any;
                      imod: any;
                      imul: any;
                      invm: any;
                      isqr: any;
                      isub: any;
                      m: {
                          abs: any;
                          add: any;
                          addn: any;
                          and: any;
                          andln: any;
                          bincn: any;
                          bitLength: any;
                          byteLength: any;
                          clone: any;
                          cmp: any;
                          cmpn: any;
                          copy: any;
                          div: any;
                          divRound: any;
                          divmod: any;
                          divn: any;
                          egcd: any;
                          eq: any;
                          eqn: any;
                          forceRed: any;
                          fromRed: any;
                          fromTwos: any;
                          gcd: any;
                          gt: any;
                          gte: any;
                          gten: any;
                          gtn: any;
                          iabs: any;
                          iadd: any;
                          iaddn: any;
                          iand: any;
                          idivn: any;
                          imaskn: any;
                          imul: any;
                          imuln: any;
                          ineg: any;
                          inotn: any;
                          inspect: any;
                          invm: any;
                          ior: any;
                          isEven: any;
                          isNeg: any;
                          isOdd: any;
                          isZero: any;
                          ishln: any;
                          ishrn: any;
                          isqr: any;
                          isub: any;
                          isubn: any;
                          iuand: any;
                          iuor: any;
                          iushln: any;
                          iushrn: any;
                          iuxor: any;
                          ixor: any;
                          length: number;
                          lt: any;
                          lte: any;
                          lten: any;
                          ltn: any;
                          maskn: any;
                          mod: any;
                          modn: any;
                          mul: any;
                          mulTo: any;
                          mulf: any;
                          muln: any;
                          neg: any;
                          negative: number;
                          notn: any;
                          or: any;
                          pow: any;
                          red: any;
                          redAdd: any;
                          redIAdd: any;
                          redIMul: any;
                          redISqr: any;
                          redISub: any;
                          redInvm: any;
                          redMul: any;
                          redNeg: any;
                          redPow: any;
                          redShl: any;
                          redSqr: any;
                          redSqrt: any;
                          redSub: any;
                          setn: any;
                          shln: any;
                          shrn: any;
                          sqr: any;
                          strip: any;
                          sub: any;
                          subn: any;
                          testn: any;
                          toArray: any;
                          toArrayLike: any;
                          toBuffer: any;
                          toJSON: any;
                          toNumber: any;
                          toRed: any;
                          toString: any;
                          toTwos: any;
                          uand: any;
                          ucmp: any;
                          umod: any;
                          uor: any;
                          ushln: any;
                          ushrn: any;
                          uxor: any;
                          words: number[];
                          xor: any;
                          zeroBits: any;
                      };
                      mul: any;
                      neg: any;
                      pow: any;
                      prime: {
                          imulK: any;
                          ireduce: any;
                          k: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          n: number;
                          name: string;
                          p: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          split: any;
                          tmp: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                      };
                      shl: any;
                      sqr: any;
                      sqrt: any;
                      sub: any;
                  };
                  redAdd: any;
                  redIAdd: any;
                  redIMul: any;
                  redISqr: any;
                  redISub: any;
                  redInvm: any;
                  redMul: any;
                  redNeg: any;
                  redPow: any;
                  redShl: any;
                  redSqr: any;
                  redSqrt: any;
                  redSub: any;
                  setn: any;
                  shln: any;
                  shrn: any;
                  sqr: any;
                  strip: any;
                  sub: any;
                  subn: any;
                  testn: any;
                  toArray: any;
                  toArrayLike: any;
                  toBuffer: any;
                  toJSON: any;
                  toNumber: any;
                  toRed: any;
                  toString: any;
                  toTwos: any;
                  uand: any;
                  ucmp: any;
                  umod: any;
                  uor: any;
                  ushln: any;
                  ushrn: any;
                  uxor: any;
                  words: number[];
                  xor: any;
                  zeroBits: any;
              };
              lambda: {
                  abs: any;
                  add: any;
                  addn: any;
                  and: any;
                  andln: any;
                  bincn: any;
                  bitLength: any;
                  byteLength: any;
                  clone: any;
                  cmp: any;
                  cmpn: any;
                  copy: any;
                  div: any;
                  divRound: any;
                  divmod: any;
                  divn: any;
                  egcd: any;
                  eq: any;
                  eqn: any;
                  forceRed: any;
                  fromRed: any;
                  fromTwos: any;
                  gcd: any;
                  gt: any;
                  gte: any;
                  gten: any;
                  gtn: any;
                  iabs: any;
                  iadd: any;
                  iaddn: any;
                  iand: any;
                  idivn: any;
                  imaskn: any;
                  imul: any;
                  imuln: any;
                  ineg: any;
                  inotn: any;
                  inspect: any;
                  invm: any;
                  ior: any;
                  isEven: any;
                  isNeg: any;
                  isOdd: any;
                  isZero: any;
                  ishln: any;
                  ishrn: any;
                  isqr: any;
                  isub: any;
                  isubn: any;
                  iuand: any;
                  iuor: any;
                  iushln: any;
                  iushrn: any;
                  iuxor: any;
                  ixor: any;
                  length: number;
                  lt: any;
                  lte: any;
                  lten: any;
                  ltn: any;
                  maskn: any;
                  mod: any;
                  modn: any;
                  mul: any;
                  mulTo: any;
                  mulf: any;
                  muln: any;
                  neg: any;
                  negative: number;
                  notn: any;
                  or: any;
                  pow: any;
                  red: any;
                  redAdd: any;
                  redIAdd: any;
                  redIMul: any;
                  redISqr: any;
                  redISub: any;
                  redInvm: any;
                  redMul: any;
                  redNeg: any;
                  redPow: any;
                  redShl: any;
                  redSqr: any;
                  redSqrt: any;
                  redSub: any;
                  setn: any;
                  shln: any;
                  shrn: any;
                  sqr: any;
                  strip: any;
                  sub: any;
                  subn: any;
                  testn: any;
                  toArray: any;
                  toArrayLike: any;
                  toBuffer: any;
                  toJSON: any;
                  toNumber: any;
                  toRed: any;
                  toString: any;
                  toTwos: any;
                  uand: any;
                  ucmp: any;
                  umod: any;
                  uor: any;
                  ushln: any;
                  ushrn: any;
                  uxor: any;
                  words: number[];
                  xor: any;
                  zeroBits: any;
              };
          };

          const threeA: boolean;

          const type: string;

          const zeroA: boolean;

          function decodePoint(bytes: any, enc: any): any;

          function jpoint(x: any, y: any, z: any): any;

          function point(x: any, y: any, isRed: any): any;

          function pointFromJSON(obj: any, red: any): any;

          function pointFromX(x: any, odd: any): any;

          function validate(point: any): any;

          namespace a {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.a
              const zeroBits: any;

          }

          namespace b {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.b
              const zeroBits: any;

          }

          namespace decodePoint {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.decodePoint
              const prototype: any;

          }

          namespace g {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const curve: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const dbl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const dblp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const encode: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const encodeCompressed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const getX: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const getY: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const inf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const isInfinity: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const jmulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const mulAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const precompute: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const precomputed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const toJ: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const x: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.g
              const y: any;

          }

          namespace jpoint {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.jpoint
              const prototype: any;

          }

          namespace n {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.n
              const zeroBits: any;

          }

          namespace one {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.one
              const zeroBits: any;

          }

          namespace p {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.p
              const zeroBits: any;

          }

          namespace point {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.point
              const prototype: any;

          }

          namespace pointFromJSON {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.pointFromJSON
              const prototype: any;

          }

          namespace pointFromX {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.pointFromX
              const prototype: any;

          }

          namespace red {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const convertFrom: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const convertTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const imod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const m: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const prime: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const shl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const sqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.red
              const sub: any;

          }

          namespace redN {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.redN
              const zeroBits: any;

          }

          namespace tinv {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.tinv
              const zeroBits: any;

          }

          namespace two {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.two
              const zeroBits: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.validate
              const prototype: any;

          }

          namespace zero {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.curve.zero
              const zeroBits: any;

          }

      }

      namespace g {
          const inf: boolean;

          const precomputed: {
              beta: any;
              doubles: {
                  points: {
                      add: any;
                      curve: {
                          a: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          b: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          decodePoint: any;
                          endo: {
                              basis: {
                                  a: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  b: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              }[];
                              beta: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: {
                                      add: any;
                                      convertFrom: any;
                                      convertTo: any;
                                      iadd: any;
                                      imod: any;
                                      imul: any;
                                      invm: any;
                                      isqr: any;
                                      isub: any;
                                      m: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      mul: any;
                                      neg: any;
                                      pow: any;
                                      prime: {
                                          imulK: any;
                                          ireduce: any;
                                          k: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                          n: number;
                                          name: string;
                                          p: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                          split: any;
                                          tmp: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                      };
                                      shl: any;
                                      sqr: any;
                                      sqrt: any;
                                      sub: any;
                                  };
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              lambda: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                          };
                          g: any;
                          jpoint: any;
                          n: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          one: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          p: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          point: any;
                          pointFromJSON: any;
                          pointFromX: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redN: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          threeA: boolean;
                          tinv: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          two: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          type: string;
                          validate: any;
                          zero: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          zeroA: boolean;
                      };
                      dbl: any;
                      dblp: any;
                      encode: any;
                      encodeCompressed: any;
                      eq: any;
                      getX: any;
                      getY: any;
                      inf: boolean;
                      inspect: any;
                      isInfinity: any;
                      jmulAdd: any;
                      mul: any;
                      mulAdd: any;
                      neg: any;
                      precompute: any;
                      precomputed: any;
                      toJ: any;
                      toJSON: any;
                      type: string;
                      validate: any;
                      x: {
                          abs: any;
                          add: any;
                          addn: any;
                          and: any;
                          andln: any;
                          bincn: any;
                          bitLength: any;
                          byteLength: any;
                          clone: any;
                          cmp: any;
                          cmpn: any;
                          copy: any;
                          div: any;
                          divRound: any;
                          divmod: any;
                          divn: any;
                          egcd: any;
                          eq: any;
                          eqn: any;
                          forceRed: any;
                          fromRed: any;
                          fromTwos: any;
                          gcd: any;
                          gt: any;
                          gte: any;
                          gten: any;
                          gtn: any;
                          iabs: any;
                          iadd: any;
                          iaddn: any;
                          iand: any;
                          idivn: any;
                          imaskn: any;
                          imul: any;
                          imuln: any;
                          ineg: any;
                          inotn: any;
                          inspect: any;
                          invm: any;
                          ior: any;
                          isEven: any;
                          isNeg: any;
                          isOdd: any;
                          isZero: any;
                          ishln: any;
                          ishrn: any;
                          isqr: any;
                          isub: any;
                          isubn: any;
                          iuand: any;
                          iuor: any;
                          iushln: any;
                          iushrn: any;
                          iuxor: any;
                          ixor: any;
                          length: number;
                          lt: any;
                          lte: any;
                          lten: any;
                          ltn: any;
                          maskn: any;
                          mod: any;
                          modn: any;
                          mul: any;
                          mulTo: any;
                          mulf: any;
                          muln: any;
                          neg: any;
                          negative: number;
                          notn: any;
                          or: any;
                          pow: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redAdd: any;
                          redIAdd: any;
                          redIMul: any;
                          redISqr: any;
                          redISub: any;
                          redInvm: any;
                          redMul: any;
                          redNeg: any;
                          redPow: any;
                          redShl: any;
                          redSqr: any;
                          redSqrt: any;
                          redSub: any;
                          setn: any;
                          shln: any;
                          shrn: any;
                          sqr: any;
                          strip: any;
                          sub: any;
                          subn: any;
                          testn: any;
                          toArray: any;
                          toArrayLike: any;
                          toBuffer: any;
                          toJSON: any;
                          toNumber: any;
                          toRed: any;
                          toString: any;
                          toTwos: any;
                          uand: any;
                          ucmp: any;
                          umod: any;
                          uor: any;
                          ushln: any;
                          ushrn: any;
                          uxor: any;
                          words: number[];
                          xor: any;
                          zeroBits: any;
                      };
                      y: {
                          abs: any;
                          add: any;
                          addn: any;
                          and: any;
                          andln: any;
                          bincn: any;
                          bitLength: any;
                          byteLength: any;
                          clone: any;
                          cmp: any;
                          cmpn: any;
                          copy: any;
                          div: any;
                          divRound: any;
                          divmod: any;
                          divn: any;
                          egcd: any;
                          eq: any;
                          eqn: any;
                          forceRed: any;
                          fromRed: any;
                          fromTwos: any;
                          gcd: any;
                          gt: any;
                          gte: any;
                          gten: any;
                          gtn: any;
                          iabs: any;
                          iadd: any;
                          iaddn: any;
                          iand: any;
                          idivn: any;
                          imaskn: any;
                          imul: any;
                          imuln: any;
                          ineg: any;
                          inotn: any;
                          inspect: any;
                          invm: any;
                          ior: any;
                          isEven: any;
                          isNeg: any;
                          isOdd: any;
                          isZero: any;
                          ishln: any;
                          ishrn: any;
                          isqr: any;
                          isub: any;
                          isubn: any;
                          iuand: any;
                          iuor: any;
                          iushln: any;
                          iushrn: any;
                          iuxor: any;
                          ixor: any;
                          length: number;
                          lt: any;
                          lte: any;
                          lten: any;
                          ltn: any;
                          maskn: any;
                          mod: any;
                          modn: any;
                          mul: any;
                          mulTo: any;
                          mulf: any;
                          muln: any;
                          neg: any;
                          negative: number;
                          notn: any;
                          or: any;
                          pow: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redAdd: any;
                          redIAdd: any;
                          redIMul: any;
                          redISqr: any;
                          redISub: any;
                          redInvm: any;
                          redMul: any;
                          redNeg: any;
                          redPow: any;
                          redShl: any;
                          redSqr: any;
                          redSqrt: any;
                          redSub: any;
                          setn: any;
                          shln: any;
                          shrn: any;
                          sqr: any;
                          strip: any;
                          sub: any;
                          subn: any;
                          testn: any;
                          toArray: any;
                          toArrayLike: any;
                          toBuffer: any;
                          toJSON: any;
                          toNumber: any;
                          toRed: any;
                          toString: any;
                          toTwos: any;
                          uand: any;
                          ucmp: any;
                          umod: any;
                          uor: any;
                          ushln: any;
                          ushrn: any;
                          uxor: any;
                          words: number[];
                          xor: any;
                          zeroBits: any;
                      };
                  }[];
                  step: number;
              };
              naf: {
                  points: {
                      add: any;
                      curve: {
                          a: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          b: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          decodePoint: any;
                          endo: {
                              basis: {
                                  a: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  b: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              }[];
                              beta: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: {
                                      add: any;
                                      convertFrom: any;
                                      convertTo: any;
                                      iadd: any;
                                      imod: any;
                                      imul: any;
                                      invm: any;
                                      isqr: any;
                                      isub: any;
                                      m: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      mul: any;
                                      neg: any;
                                      pow: any;
                                      prime: {
                                          imulK: any;
                                          ireduce: any;
                                          k: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                          n: number;
                                          name: string;
                                          p: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                          split: any;
                                          tmp: {
                                              abs: any;
                                              add: any;
                                              addn: any;
                                              and: any;
                                              andln: any;
                                              bincn: any;
                                              bitLength: any;
                                              byteLength: any;
                                              clone: any;
                                              cmp: any;
                                              cmpn: any;
                                              copy: any;
                                              div: any;
                                              divRound: any;
                                              divmod: any;
                                              divn: any;
                                              egcd: any;
                                              eq: any;
                                              eqn: any;
                                              forceRed: any;
                                              fromRed: any;
                                              fromTwos: any;
                                              gcd: any;
                                              gt: any;
                                              gte: any;
                                              gten: any;
                                              gtn: any;
                                              iabs: any;
                                              iadd: any;
                                              iaddn: any;
                                              iand: any;
                                              idivn: any;
                                              imaskn: any;
                                              imul: any;
                                              imuln: any;
                                              ineg: any;
                                              inotn: any;
                                              inspect: any;
                                              invm: any;
                                              ior: any;
                                              isEven: any;
                                              isNeg: any;
                                              isOdd: any;
                                              isZero: any;
                                              ishln: any;
                                              ishrn: any;
                                              isqr: any;
                                              isub: any;
                                              isubn: any;
                                              iuand: any;
                                              iuor: any;
                                              iushln: any;
                                              iushrn: any;
                                              iuxor: any;
                                              ixor: any;
                                              length: number;
                                              lt: any;
                                              lte: any;
                                              lten: any;
                                              ltn: any;
                                              maskn: any;
                                              mod: any;
                                              modn: any;
                                              mul: any;
                                              mulTo: any;
                                              mulf: any;
                                              muln: any;
                                              neg: any;
                                              negative: number;
                                              notn: any;
                                              or: any;
                                              pow: any;
                                              red: any;
                                              redAdd: any;
                                              redIAdd: any;
                                              redIMul: any;
                                              redISqr: any;
                                              redISub: any;
                                              redInvm: any;
                                              redMul: any;
                                              redNeg: any;
                                              redPow: any;
                                              redShl: any;
                                              redSqr: any;
                                              redSqrt: any;
                                              redSub: any;
                                              setn: any;
                                              shln: any;
                                              shrn: any;
                                              sqr: any;
                                              strip: any;
                                              sub: any;
                                              subn: any;
                                              testn: any;
                                              toArray: any;
                                              toArrayLike: any;
                                              toBuffer: any;
                                              toJSON: any;
                                              toNumber: any;
                                              toRed: any;
                                              toString: any;
                                              toTwos: any;
                                              uand: any;
                                              ucmp: any;
                                              umod: any;
                                              uor: any;
                                              ushln: any;
                                              ushrn: any;
                                              uxor: any;
                                              words: number[];
                                              xor: any;
                                              zeroBits: any;
                                          };
                                      };
                                      shl: any;
                                      sqr: any;
                                      sqrt: any;
                                      sub: any;
                                  };
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              lambda: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                          };
                          g: any;
                          jpoint: any;
                          n: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          one: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          p: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: any;
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          point: any;
                          pointFromJSON: any;
                          pointFromX: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redN: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          threeA: boolean;
                          tinv: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          two: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          type: string;
                          validate: any;
                          zero: {
                              abs: any;
                              add: any;
                              addn: any;
                              and: any;
                              andln: any;
                              bincn: any;
                              bitLength: any;
                              byteLength: any;
                              clone: any;
                              cmp: any;
                              cmpn: any;
                              copy: any;
                              div: any;
                              divRound: any;
                              divmod: any;
                              divn: any;
                              egcd: any;
                              eq: any;
                              eqn: any;
                              forceRed: any;
                              fromRed: any;
                              fromTwos: any;
                              gcd: any;
                              gt: any;
                              gte: any;
                              gten: any;
                              gtn: any;
                              iabs: any;
                              iadd: any;
                              iaddn: any;
                              iand: any;
                              idivn: any;
                              imaskn: any;
                              imul: any;
                              imuln: any;
                              ineg: any;
                              inotn: any;
                              inspect: any;
                              invm: any;
                              ior: any;
                              isEven: any;
                              isNeg: any;
                              isOdd: any;
                              isZero: any;
                              ishln: any;
                              ishrn: any;
                              isqr: any;
                              isub: any;
                              isubn: any;
                              iuand: any;
                              iuor: any;
                              iushln: any;
                              iushrn: any;
                              iuxor: any;
                              ixor: any;
                              length: number;
                              lt: any;
                              lte: any;
                              lten: any;
                              ltn: any;
                              maskn: any;
                              mod: any;
                              modn: any;
                              mul: any;
                              mulTo: any;
                              mulf: any;
                              muln: any;
                              neg: any;
                              negative: number;
                              notn: any;
                              or: any;
                              pow: any;
                              red: {
                                  add: any;
                                  convertFrom: any;
                                  convertTo: any;
                                  iadd: any;
                                  imod: any;
                                  imul: any;
                                  invm: any;
                                  isqr: any;
                                  isub: any;
                                  m: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  mul: any;
                                  neg: any;
                                  pow: any;
                                  prime: {
                                      imulK: any;
                                      ireduce: any;
                                      k: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      n: number;
                                      name: string;
                                      p: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                      split: any;
                                      tmp: {
                                          abs: any;
                                          add: any;
                                          addn: any;
                                          and: any;
                                          andln: any;
                                          bincn: any;
                                          bitLength: any;
                                          byteLength: any;
                                          clone: any;
                                          cmp: any;
                                          cmpn: any;
                                          copy: any;
                                          div: any;
                                          divRound: any;
                                          divmod: any;
                                          divn: any;
                                          egcd: any;
                                          eq: any;
                                          eqn: any;
                                          forceRed: any;
                                          fromRed: any;
                                          fromTwos: any;
                                          gcd: any;
                                          gt: any;
                                          gte: any;
                                          gten: any;
                                          gtn: any;
                                          iabs: any;
                                          iadd: any;
                                          iaddn: any;
                                          iand: any;
                                          idivn: any;
                                          imaskn: any;
                                          imul: any;
                                          imuln: any;
                                          ineg: any;
                                          inotn: any;
                                          inspect: any;
                                          invm: any;
                                          ior: any;
                                          isEven: any;
                                          isNeg: any;
                                          isOdd: any;
                                          isZero: any;
                                          ishln: any;
                                          ishrn: any;
                                          isqr: any;
                                          isub: any;
                                          isubn: any;
                                          iuand: any;
                                          iuor: any;
                                          iushln: any;
                                          iushrn: any;
                                          iuxor: any;
                                          ixor: any;
                                          length: number;
                                          lt: any;
                                          lte: any;
                                          lten: any;
                                          ltn: any;
                                          maskn: any;
                                          mod: any;
                                          modn: any;
                                          mul: any;
                                          mulTo: any;
                                          mulf: any;
                                          muln: any;
                                          neg: any;
                                          negative: number;
                                          notn: any;
                                          or: any;
                                          pow: any;
                                          red: any;
                                          redAdd: any;
                                          redIAdd: any;
                                          redIMul: any;
                                          redISqr: any;
                                          redISub: any;
                                          redInvm: any;
                                          redMul: any;
                                          redNeg: any;
                                          redPow: any;
                                          redShl: any;
                                          redSqr: any;
                                          redSqrt: any;
                                          redSub: any;
                                          setn: any;
                                          shln: any;
                                          shrn: any;
                                          sqr: any;
                                          strip: any;
                                          sub: any;
                                          subn: any;
                                          testn: any;
                                          toArray: any;
                                          toArrayLike: any;
                                          toBuffer: any;
                                          toJSON: any;
                                          toNumber: any;
                                          toRed: any;
                                          toString: any;
                                          toTwos: any;
                                          uand: any;
                                          ucmp: any;
                                          umod: any;
                                          uor: any;
                                          ushln: any;
                                          ushrn: any;
                                          uxor: any;
                                          words: number[];
                                          xor: any;
                                          zeroBits: any;
                                      };
                                  };
                                  shl: any;
                                  sqr: any;
                                  sqrt: any;
                                  sub: any;
                              };
                              redAdd: any;
                              redIAdd: any;
                              redIMul: any;
                              redISqr: any;
                              redISub: any;
                              redInvm: any;
                              redMul: any;
                              redNeg: any;
                              redPow: any;
                              redShl: any;
                              redSqr: any;
                              redSqrt: any;
                              redSub: any;
                              setn: any;
                              shln: any;
                              shrn: any;
                              sqr: any;
                              strip: any;
                              sub: any;
                              subn: any;
                              testn: any;
                              toArray: any;
                              toArrayLike: any;
                              toBuffer: any;
                              toJSON: any;
                              toNumber: any;
                              toRed: any;
                              toString: any;
                              toTwos: any;
                              uand: any;
                              ucmp: any;
                              umod: any;
                              uor: any;
                              ushln: any;
                              ushrn: any;
                              uxor: any;
                              words: number[];
                              xor: any;
                              zeroBits: any;
                          };
                          zeroA: boolean;
                      };
                      dbl: any;
                      dblp: any;
                      encode: any;
                      encodeCompressed: any;
                      eq: any;
                      getX: any;
                      getY: any;
                      inf: boolean;
                      inspect: any;
                      isInfinity: any;
                      jmulAdd: any;
                      mul: any;
                      mulAdd: any;
                      neg: any;
                      precompute: any;
                      precomputed: any;
                      toJ: any;
                      toJSON: any;
                      type: string;
                      validate: any;
                      x: {
                          abs: any;
                          add: any;
                          addn: any;
                          and: any;
                          andln: any;
                          bincn: any;
                          bitLength: any;
                          byteLength: any;
                          clone: any;
                          cmp: any;
                          cmpn: any;
                          copy: any;
                          div: any;
                          divRound: any;
                          divmod: any;
                          divn: any;
                          egcd: any;
                          eq: any;
                          eqn: any;
                          forceRed: any;
                          fromRed: any;
                          fromTwos: any;
                          gcd: any;
                          gt: any;
                          gte: any;
                          gten: any;
                          gtn: any;
                          iabs: any;
                          iadd: any;
                          iaddn: any;
                          iand: any;
                          idivn: any;
                          imaskn: any;
                          imul: any;
                          imuln: any;
                          ineg: any;
                          inotn: any;
                          inspect: any;
                          invm: any;
                          ior: any;
                          isEven: any;
                          isNeg: any;
                          isOdd: any;
                          isZero: any;
                          ishln: any;
                          ishrn: any;
                          isqr: any;
                          isub: any;
                          isubn: any;
                          iuand: any;
                          iuor: any;
                          iushln: any;
                          iushrn: any;
                          iuxor: any;
                          ixor: any;
                          length: number;
                          lt: any;
                          lte: any;
                          lten: any;
                          ltn: any;
                          maskn: any;
                          mod: any;
                          modn: any;
                          mul: any;
                          mulTo: any;
                          mulf: any;
                          muln: any;
                          neg: any;
                          negative: number;
                          notn: any;
                          or: any;
                          pow: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redAdd: any;
                          redIAdd: any;
                          redIMul: any;
                          redISqr: any;
                          redISub: any;
                          redInvm: any;
                          redMul: any;
                          redNeg: any;
                          redPow: any;
                          redShl: any;
                          redSqr: any;
                          redSqrt: any;
                          redSub: any;
                          setn: any;
                          shln: any;
                          shrn: any;
                          sqr: any;
                          strip: any;
                          sub: any;
                          subn: any;
                          testn: any;
                          toArray: any;
                          toArrayLike: any;
                          toBuffer: any;
                          toJSON: any;
                          toNumber: any;
                          toRed: any;
                          toString: any;
                          toTwos: any;
                          uand: any;
                          ucmp: any;
                          umod: any;
                          uor: any;
                          ushln: any;
                          ushrn: any;
                          uxor: any;
                          words: number[];
                          xor: any;
                          zeroBits: any;
                      };
                      y: {
                          abs: any;
                          add: any;
                          addn: any;
                          and: any;
                          andln: any;
                          bincn: any;
                          bitLength: any;
                          byteLength: any;
                          clone: any;
                          cmp: any;
                          cmpn: any;
                          copy: any;
                          div: any;
                          divRound: any;
                          divmod: any;
                          divn: any;
                          egcd: any;
                          eq: any;
                          eqn: any;
                          forceRed: any;
                          fromRed: any;
                          fromTwos: any;
                          gcd: any;
                          gt: any;
                          gte: any;
                          gten: any;
                          gtn: any;
                          iabs: any;
                          iadd: any;
                          iaddn: any;
                          iand: any;
                          idivn: any;
                          imaskn: any;
                          imul: any;
                          imuln: any;
                          ineg: any;
                          inotn: any;
                          inspect: any;
                          invm: any;
                          ior: any;
                          isEven: any;
                          isNeg: any;
                          isOdd: any;
                          isZero: any;
                          ishln: any;
                          ishrn: any;
                          isqr: any;
                          isub: any;
                          isubn: any;
                          iuand: any;
                          iuor: any;
                          iushln: any;
                          iushrn: any;
                          iuxor: any;
                          ixor: any;
                          length: number;
                          lt: any;
                          lte: any;
                          lten: any;
                          ltn: any;
                          maskn: any;
                          mod: any;
                          modn: any;
                          mul: any;
                          mulTo: any;
                          mulf: any;
                          muln: any;
                          neg: any;
                          negative: number;
                          notn: any;
                          or: any;
                          pow: any;
                          red: {
                              add: any;
                              convertFrom: any;
                              convertTo: any;
                              iadd: any;
                              imod: any;
                              imul: any;
                              invm: any;
                              isqr: any;
                              isub: any;
                              m: {
                                  abs: any;
                                  add: any;
                                  addn: any;
                                  and: any;
                                  andln: any;
                                  bincn: any;
                                  bitLength: any;
                                  byteLength: any;
                                  clone: any;
                                  cmp: any;
                                  cmpn: any;
                                  copy: any;
                                  div: any;
                                  divRound: any;
                                  divmod: any;
                                  divn: any;
                                  egcd: any;
                                  eq: any;
                                  eqn: any;
                                  forceRed: any;
                                  fromRed: any;
                                  fromTwos: any;
                                  gcd: any;
                                  gt: any;
                                  gte: any;
                                  gten: any;
                                  gtn: any;
                                  iabs: any;
                                  iadd: any;
                                  iaddn: any;
                                  iand: any;
                                  idivn: any;
                                  imaskn: any;
                                  imul: any;
                                  imuln: any;
                                  ineg: any;
                                  inotn: any;
                                  inspect: any;
                                  invm: any;
                                  ior: any;
                                  isEven: any;
                                  isNeg: any;
                                  isOdd: any;
                                  isZero: any;
                                  ishln: any;
                                  ishrn: any;
                                  isqr: any;
                                  isub: any;
                                  isubn: any;
                                  iuand: any;
                                  iuor: any;
                                  iushln: any;
                                  iushrn: any;
                                  iuxor: any;
                                  ixor: any;
                                  length: number;
                                  lt: any;
                                  lte: any;
                                  lten: any;
                                  ltn: any;
                                  maskn: any;
                                  mod: any;
                                  modn: any;
                                  mul: any;
                                  mulTo: any;
                                  mulf: any;
                                  muln: any;
                                  neg: any;
                                  negative: number;
                                  notn: any;
                                  or: any;
                                  pow: any;
                                  red: any;
                                  redAdd: any;
                                  redIAdd: any;
                                  redIMul: any;
                                  redISqr: any;
                                  redISub: any;
                                  redInvm: any;
                                  redMul: any;
                                  redNeg: any;
                                  redPow: any;
                                  redShl: any;
                                  redSqr: any;
                                  redSqrt: any;
                                  redSub: any;
                                  setn: any;
                                  shln: any;
                                  shrn: any;
                                  sqr: any;
                                  strip: any;
                                  sub: any;
                                  subn: any;
                                  testn: any;
                                  toArray: any;
                                  toArrayLike: any;
                                  toBuffer: any;
                                  toJSON: any;
                                  toNumber: any;
                                  toRed: any;
                                  toString: any;
                                  toTwos: any;
                                  uand: any;
                                  ucmp: any;
                                  umod: any;
                                  uor: any;
                                  ushln: any;
                                  ushrn: any;
                                  uxor: any;
                                  words: number[];
                                  xor: any;
                                  zeroBits: any;
                              };
                              mul: any;
                              neg: any;
                              pow: any;
                              prime: {
                                  imulK: any;
                                  ireduce: any;
                                  k: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  n: number;
                                  name: string;
                                  p: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                                  split: any;
                                  tmp: {
                                      abs: any;
                                      add: any;
                                      addn: any;
                                      and: any;
                                      andln: any;
                                      bincn: any;
                                      bitLength: any;
                                      byteLength: any;
                                      clone: any;
                                      cmp: any;
                                      cmpn: any;
                                      copy: any;
                                      div: any;
                                      divRound: any;
                                      divmod: any;
                                      divn: any;
                                      egcd: any;
                                      eq: any;
                                      eqn: any;
                                      forceRed: any;
                                      fromRed: any;
                                      fromTwos: any;
                                      gcd: any;
                                      gt: any;
                                      gte: any;
                                      gten: any;
                                      gtn: any;
                                      iabs: any;
                                      iadd: any;
                                      iaddn: any;
                                      iand: any;
                                      idivn: any;
                                      imaskn: any;
                                      imul: any;
                                      imuln: any;
                                      ineg: any;
                                      inotn: any;
                                      inspect: any;
                                      invm: any;
                                      ior: any;
                                      isEven: any;
                                      isNeg: any;
                                      isOdd: any;
                                      isZero: any;
                                      ishln: any;
                                      ishrn: any;
                                      isqr: any;
                                      isub: any;
                                      isubn: any;
                                      iuand: any;
                                      iuor: any;
                                      iushln: any;
                                      iushrn: any;
                                      iuxor: any;
                                      ixor: any;
                                      length: number;
                                      lt: any;
                                      lte: any;
                                      lten: any;
                                      ltn: any;
                                      maskn: any;
                                      mod: any;
                                      modn: any;
                                      mul: any;
                                      mulTo: any;
                                      mulf: any;
                                      muln: any;
                                      neg: any;
                                      negative: number;
                                      notn: any;
                                      or: any;
                                      pow: any;
                                      red: any;
                                      redAdd: any;
                                      redIAdd: any;
                                      redIMul: any;
                                      redISqr: any;
                                      redISub: any;
                                      redInvm: any;
                                      redMul: any;
                                      redNeg: any;
                                      redPow: any;
                                      redShl: any;
                                      redSqr: any;
                                      redSqrt: any;
                                      redSub: any;
                                      setn: any;
                                      shln: any;
                                      shrn: any;
                                      sqr: any;
                                      strip: any;
                                      sub: any;
                                      subn: any;
                                      testn: any;
                                      toArray: any;
                                      toArrayLike: any;
                                      toBuffer: any;
                                      toJSON: any;
                                      toNumber: any;
                                      toRed: any;
                                      toString: any;
                                      toTwos: any;
                                      uand: any;
                                      ucmp: any;
                                      umod: any;
                                      uor: any;
                                      ushln: any;
                                      ushrn: any;
                                      uxor: any;
                                      words: number[];
                                      xor: any;
                                      zeroBits: any;
                                  };
                              };
                              shl: any;
                              sqr: any;
                              sqrt: any;
                              sub: any;
                          };
                          redAdd: any;
                          redIAdd: any;
                          redIMul: any;
                          redISqr: any;
                          redISub: any;
                          redInvm: any;
                          redMul: any;
                          redNeg: any;
                          redPow: any;
                          redShl: any;
                          redSqr: any;
                          redSqrt: any;
                          redSub: any;
                          setn: any;
                          shln: any;
                          shrn: any;
                          sqr: any;
                          strip: any;
                          sub: any;
                          subn: any;
                          testn: any;
                          toArray: any;
                          toArrayLike: any;
                          toBuffer: any;
                          toJSON: any;
                          toNumber: any;
                          toRed: any;
                          toString: any;
                          toTwos: any;
                          uand: any;
                          ucmp: any;
                          umod: any;
                          uor: any;
                          ushln: any;
                          ushrn: any;
                          uxor: any;
                          words: number[];
                          xor: any;
                          zeroBits: any;
                      };
                  }[];
                  wnd: number;
              };
          };

          const type: string;

          function add(p: any): any;

          function dbl(): any;

          function dblp(k: any): any;

          function encode(enc: any, compact: any): any;

          function encodeCompressed(enc: any): any;

          function eq(p: any): any;

          function getX(): any;

          function getY(): any;

          function inspect(): any;

          function isInfinity(): any;

          function jmulAdd(k1: any, p2: any, k2: any): any;

          function mul(k: any): any;

          function mulAdd(k1: any, p2: any, k2: any): any;

          function neg(_precompute: any): any;

          function precompute(power: any): any;

          function toJ(): any;

          function toJSON(): any;

          function validate(): any;

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.add
              const prototype: any;

          }

          namespace curve {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const a: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const b: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const decodePoint: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const endo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const g: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const jpoint: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const n: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const one: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const p: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const point: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const pointFromJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const pointFromX: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const redN: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const threeA: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const tinv: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const two: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const type: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const validate: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const zero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.curve
              const zeroA: any;

          }

          namespace dbl {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.dbl
              const prototype: any;

          }

          namespace dblp {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.dblp
              const prototype: any;

          }

          namespace encode {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.encode
              const prototype: any;

          }

          namespace encodeCompressed {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.encodeCompressed
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.eq
              const prototype: any;

          }

          namespace getX {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.getX
              const prototype: any;

          }

          namespace getY {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.getY
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.inspect
              const prototype: any;

          }

          namespace isInfinity {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.isInfinity
              const prototype: any;

          }

          namespace jmulAdd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.jmulAdd
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.mul
              const prototype: any;

          }

          namespace mulAdd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.mulAdd
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.neg
              const prototype: any;

          }

          namespace precompute {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.precompute
              const prototype: any;

          }

          namespace toJ {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.toJ
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.toJSON
              const prototype: any;

          }

          namespace validate {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.validate
              const prototype: any;

          }

          namespace x {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.x
              const zeroBits: any;

          }

          namespace y {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const abs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const add: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const addn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const and: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const andln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const bincn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const bitLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const byteLength: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const clone: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const cmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const cmpn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const copy: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const div: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const divRound: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const divmod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const divn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const egcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const eq: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const eqn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const forceRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const fromRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const fromTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const gcd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const gt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const gte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const gten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const gtn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iabs: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iadd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iaddn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const idivn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const imaskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const imul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const imuln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ineg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const inotn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const inspect: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const invm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ior: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isEven: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isOdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isZero: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ishln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ishrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const isubn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iuand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iuor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const iuxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ixor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const length: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const lt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const lte: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const lten: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ltn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const maskn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const mod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const modn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const mul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const mulTo: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const mulf: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const muln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const neg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const negative: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const notn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const or: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const pow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const red: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redIAdd: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redIMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redISqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redISub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redInvm: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redMul: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redNeg: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redPow: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redShl: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redSqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redSqrt: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const redSub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const setn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const shln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const shrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const sqr: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const strip: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const sub: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const subn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const testn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toArray: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toArrayLike: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toBuffer: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toJSON: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toNumber: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toRed: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toString: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const toTwos: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const uand: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ucmp: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const umod: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const uor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ushln: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const ushrn: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const uxor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const words: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const xor: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.g.y
              const zeroBits: any;

          }

      }

      namespace hash {
          namespace prototype {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.hash.prototype
              const digest: any;

              // Too-deep object hierarchy from elliptic.curves.secp256k1.hash.prototype
              const update: any;

          }

      }

      namespace n {
          const length: number;

          const negative: number;

          const red: any;

          const words: number[];

          function abs(): any;

          function add(num: any): any;

          function addn(num: any): any;

          function and(num: any): any;

          function andln(num: any): any;

          function bincn(bit: any): any;

          function bitLength(): any;

          function byteLength(): any;

          function clone(): any;

          function cmp(num: any): any;

          function cmpn(num: any): any;

          function copy(dest: any): void;

          function div(num: any): any;

          function divRound(num: any): any;

          function divmod(num: any, mode: any, positive: any): any;

          function divn(num: any): any;

          function egcd(p: any): any;

          function eq(num: any): any;

          function eqn(num: any): any;

          function forceRed(ctx: any): any;

          function fromRed(): any;

          function fromTwos(width: any): any;

          function gcd(num: any): any;

          function gt(num: any): any;

          function gte(num: any): any;

          function gten(num: any): any;

          function gtn(num: any): any;

          function iabs(): any;

          function iadd(num: any): any;

          function iaddn(num: any): any;

          function iand(num: any): any;

          function idivn(num: any): any;

          function imaskn(bits: any): any;

          function imul(num: any): any;

          function imuln(num: any): any;

          function ineg(): any;

          function inotn(width: any): any;

          function inspect(): any;

          function invm(num: any): any;

          function ior(num: any): any;

          function isEven(): any;

          function isNeg(): any;

          function isOdd(): any;

          function isZero(): any;

          function ishln(bits: any): any;

          function ishrn(bits: any, hint: any, extended: any): any;

          function isqr(): any;

          function isub(num: any): any;

          function isubn(num: any): any;

          function iuand(num: any): any;

          function iuor(num: any): any;

          function iushln(bits: any): any;

          function iushrn(bits: any, hint: any, extended: any): any;

          function iuxor(num: any): any;

          function ixor(num: any): any;

          function lt(num: any): any;

          function lte(num: any): any;

          function lten(num: any): any;

          function ltn(num: any): any;

          function maskn(bits: any): any;

          function mod(num: any): any;

          function modn(num: any): any;

          function mul(num: any): any;

          function mulTo(num: any, out: any): any;

          function mulf(num: any): any;

          function muln(num: any): any;

          function neg(): any;

          function notn(width: any): any;

          function or(num: any): any;

          function pow(num: any): any;

          function redAdd(num: any): any;

          function redIAdd(num: any): any;

          function redIMul(num: any): any;

          function redISqr(): any;

          function redISub(num: any): any;

          function redInvm(): any;

          function redMul(num: any): any;

          function redNeg(): any;

          function redPow(num: any): any;

          function redShl(num: any): any;

          function redSqr(): any;

          function redSqrt(): any;

          function redSub(num: any): any;

          function setn(bit: any, val: any): any;

          function shln(bits: any): any;

          function shrn(bits: any): any;

          function sqr(): any;

          function strip(): any;

          function sub(num: any): any;

          function subn(num: any): any;

          function testn(bit: any): any;

          function toArray(endian: any, length: any): any;

          function toArrayLike(ArrayType: any, endian: any, length: any): any;

          function toBuffer(endian: any, length: any): any;

          function toJSON(): any;

          function toNumber(): any;

          function toRed(ctx: any): any;

          function toString(base: any, padding: any): any;

          function toTwos(width: any): any;

          function uand(num: any): any;

          function ucmp(num: any): any;

          function umod(num: any): any;

          function uor(num: any): any;

          function ushln(bits: any): any;

          function ushrn(bits: any): any;

          function uxor(num: any): any;

          function xor(num: any): any;

          function zeroBits(): any;

          namespace abs {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.abs
              const prototype: any;

          }

          namespace add {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.add
              const prototype: any;

          }

          namespace addn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.addn
              const prototype: any;

          }

          namespace and {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.and
              const prototype: any;

          }

          namespace andln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.andln
              const prototype: any;

          }

          namespace bincn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.bincn
              const prototype: any;

          }

          namespace bitLength {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.bitLength
              const prototype: any;

          }

          namespace byteLength {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.byteLength
              const prototype: any;

          }

          namespace clone {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.clone
              const prototype: any;

          }

          namespace cmp {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.cmp
              const prototype: any;

          }

          namespace cmpn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.cmpn
              const prototype: any;

          }

          namespace copy {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.copy
              const prototype: any;

          }

          namespace div {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.div
              const prototype: any;

          }

          namespace divRound {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.divRound
              const prototype: any;

          }

          namespace divmod {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.divmod
              const prototype: any;

          }

          namespace divn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.divn
              const prototype: any;

          }

          namespace egcd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.egcd
              const prototype: any;

          }

          namespace eq {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.eq
              const prototype: any;

          }

          namespace eqn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.eqn
              const prototype: any;

          }

          namespace forceRed {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.forceRed
              const prototype: any;

          }

          namespace fromRed {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.fromRed
              const prototype: any;

          }

          namespace fromTwos {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.fromTwos
              const prototype: any;

          }

          namespace gcd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.gcd
              const prototype: any;

          }

          namespace gt {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.gt
              const prototype: any;

          }

          namespace gte {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.gte
              const prototype: any;

          }

          namespace gten {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.gten
              const prototype: any;

          }

          namespace gtn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.gtn
              const prototype: any;

          }

          namespace iabs {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iabs
              const prototype: any;

          }

          namespace iadd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iadd
              const prototype: any;

          }

          namespace iaddn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iaddn
              const prototype: any;

          }

          namespace iand {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iand
              const prototype: any;

          }

          namespace idivn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.idivn
              const prototype: any;

          }

          namespace imaskn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.imaskn
              const prototype: any;

          }

          namespace imul {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.imul
              const prototype: any;

          }

          namespace imuln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.imuln
              const prototype: any;

          }

          namespace ineg {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ineg
              const prototype: any;

          }

          namespace inotn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.inotn
              const prototype: any;

          }

          namespace inspect {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.inspect
              const prototype: any;

          }

          namespace invm {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.invm
              const prototype: any;

          }

          namespace ior {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ior
              const prototype: any;

          }

          namespace isEven {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isEven
              const prototype: any;

          }

          namespace isNeg {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isNeg
              const prototype: any;

          }

          namespace isOdd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isOdd
              const prototype: any;

          }

          namespace isZero {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isZero
              const prototype: any;

          }

          namespace ishln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ishln
              const prototype: any;

          }

          namespace ishrn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ishrn
              const prototype: any;

          }

          namespace isqr {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isqr
              const prototype: any;

          }

          namespace isub {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isub
              const prototype: any;

          }

          namespace isubn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.isubn
              const prototype: any;

          }

          namespace iuand {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iuand
              const prototype: any;

          }

          namespace iuor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iuor
              const prototype: any;

          }

          namespace iushln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iushln
              const prototype: any;

          }

          namespace iushrn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iushrn
              const prototype: any;

          }

          namespace iuxor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.iuxor
              const prototype: any;

          }

          namespace ixor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ixor
              const prototype: any;

          }

          namespace lt {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.lt
              const prototype: any;

          }

          namespace lte {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.lte
              const prototype: any;

          }

          namespace lten {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.lten
              const prototype: any;

          }

          namespace ltn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ltn
              const prototype: any;

          }

          namespace maskn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.maskn
              const prototype: any;

          }

          namespace mod {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.mod
              const prototype: any;

          }

          namespace modn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.modn
              const prototype: any;

          }

          namespace mul {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.mul
              const prototype: any;

          }

          namespace mulTo {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.mulTo
              const prototype: any;

          }

          namespace mulf {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.mulf
              const prototype: any;

          }

          namespace muln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.muln
              const prototype: any;

          }

          namespace neg {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.neg
              const prototype: any;

          }

          namespace notn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.notn
              const prototype: any;

          }

          namespace or {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.or
              const prototype: any;

          }

          namespace pow {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.pow
              const prototype: any;

          }

          namespace redAdd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redAdd
              const prototype: any;

          }

          namespace redIAdd {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redIAdd
              const prototype: any;

          }

          namespace redIMul {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redIMul
              const prototype: any;

          }

          namespace redISqr {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redISqr
              const prototype: any;

          }

          namespace redISub {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redISub
              const prototype: any;

          }

          namespace redInvm {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redInvm
              const prototype: any;

          }

          namespace redMul {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redMul
              const prototype: any;

          }

          namespace redNeg {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redNeg
              const prototype: any;

          }

          namespace redPow {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redPow
              const prototype: any;

          }

          namespace redShl {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redShl
              const prototype: any;

          }

          namespace redSqr {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redSqr
              const prototype: any;

          }

          namespace redSqrt {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redSqrt
              const prototype: any;

          }

          namespace redSub {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.redSub
              const prototype: any;

          }

          namespace setn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.setn
              const prototype: any;

          }

          namespace shln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.shln
              const prototype: any;

          }

          namespace shrn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.shrn
              const prototype: any;

          }

          namespace sqr {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.sqr
              const prototype: any;

          }

          namespace strip {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.strip
              const prototype: any;

          }

          namespace sub {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.sub
              const prototype: any;

          }

          namespace subn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.subn
              const prototype: any;

          }

          namespace testn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.testn
              const prototype: any;

          }

          namespace toArray {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toArray
              const prototype: any;

          }

          namespace toArrayLike {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toArrayLike
              const prototype: any;

          }

          namespace toBuffer {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toBuffer
              const prototype: any;

          }

          namespace toJSON {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toJSON
              const prototype: any;

          }

          namespace toNumber {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toNumber
              const prototype: any;

          }

          namespace toRed {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toRed
              const prototype: any;

          }

          namespace toString {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toString
              const prototype: any;

          }

          namespace toTwos {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.toTwos
              const prototype: any;

          }

          namespace uand {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.uand
              const prototype: any;

          }

          namespace ucmp {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ucmp
              const prototype: any;

          }

          namespace umod {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.umod
              const prototype: any;

          }

          namespace uor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.uor
              const prototype: any;

          }

          namespace ushln {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ushln
              const prototype: any;

          }

          namespace ushrn {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.ushrn
              const prototype: any;

          }

          namespace uxor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.uxor
              const prototype: any;

          }

          namespace xor {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.xor
              const prototype: any;

          }

          namespace zeroBits {
              // Too-deep object hierarchy from elliptic.curves.secp256k1.n.zeroBits
              const prototype: any;

          }

      }

  }

}

export namespace ec {
  namespace prototype {
      function genKeyPair(options: any): any;

      function getKeyRecoveryParam(e: any, signature: any, Q: any, enc: any): any;

      function keyFromPrivate(priv: any, enc: any): any;

      function keyFromPublic(pub: any, enc: any): any;

      function keyPair(options: any): any;

      function recoverPubKey(msg: any, signature: any, j: any, enc: any): any;

      function sign(msg: any, key: any, enc: any, options: any): any;

      function verify(msg: any, signature: any, key: any, enc: any): any;

      namespace genKeyPair {
          const prototype: {
          };

      }

      namespace getKeyRecoveryParam {
          const prototype: {
          };

      }

      namespace keyFromPrivate {
          const prototype: {
          };

      }

      namespace keyFromPublic {
          const prototype: {
          };

      }

      namespace keyPair {
          const prototype: {
          };

      }

      namespace recoverPubKey {
          const prototype: {
          };

      }

      namespace sign {
          const prototype: {
          };

      }

      namespace verify {
          const prototype: {
          };

      }

  }

}

export namespace eddsa {
  namespace prototype {
      function decodeInt(bytes: any): any;

      function decodePoint(bytes: any): any;

      function encodeInt(num: any): any;

      function encodePoint(point: any): any;

      function hashInt(...args: any[]): any;

      function isPoint(val: any): any;

      function keyFromPublic(pub: any): any;

      function keyFromSecret(secret: any): any;

      function makeSignature(sig: any): any;

      function sign(message: any, secret: any): any;

      function verify(message: any, sig: any, pub: any): any;

      namespace decodeInt {
          const prototype: {
          };

      }

      namespace decodePoint {
          const prototype: {
          };

      }

      namespace encodeInt {
          const prototype: {
          };

      }

      namespace encodePoint {
          const prototype: {
          };

      }

      namespace hashInt {
          const prototype: {
          };

      }

      namespace isPoint {
          const prototype: {
          };

      }

      namespace keyFromPublic {
          const prototype: {
          };

      }

      namespace keyFromSecret {
          const prototype: {
          };

      }

      namespace makeSignature {
          const prototype: {
          };

      }

      namespace sign {
          const prototype: {
          };

      }

      namespace verify {
          const prototype: {
          };

      }

  }

}

export namespace rand {
  class Rand {
      constructor(rand: any);

      generate(len: any): any;

  }

  const prototype: {
  };

  namespace Rand {
      namespace prototype {
          function generate(len: any): any;

          namespace generate {
              // Too-deep object hierarchy from elliptic.rand.Rand.prototype.generate
              const prototype: any;

          }

      }

  }

}

export namespace utils {
  function assert(val: any, msg: any): void;

  function cachedProperty(obj: any, name: any, computer: any): any;

  function encode(arr: any, enc: any): any;

  function getJSF(k1: any, k2: any): any;

  function getNAF(num: any, w: any): any;

  function intFromLE(bytes: any): any;

  function parseBytes(bytes: any): any;

  function toArray(msg: any, enc: any): any;

  function toHex(msg: any): any;

  function zero2(word: any): any;

  namespace assert {
      const prototype: {
      };

      function equal(l: any, r: any, msg: any): void;

      namespace equal {
          const prototype: {
          };

      }

  }

  namespace cachedProperty {
      const prototype: {
      };

  }

  namespace encode {
      const prototype: {
      };

  }

  namespace getJSF {
      const prototype: {
      };

  }

  namespace getNAF {
      const prototype: {
      };

  }

  namespace intFromLE {
      const prototype: {
      };

  }

  namespace parseBytes {
      const prototype: {
      };

  }

  namespace toArray {
      const prototype: {
      };

  }

  namespace toHex {
      const prototype: {
      };

  }

  namespace zero2 {
      const prototype: {
      };

  }

}

