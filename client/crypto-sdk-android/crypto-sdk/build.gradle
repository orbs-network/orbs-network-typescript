import org.gradle.internal.os.OperatingSystem
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName '0.0.10'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DPLATFORM=android'
                cppFlags '-fexceptions -std=c++11'
            }
        }

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles.add(file('proguard-rules.pro'))
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    def localBuildDir = "${projectDir.absolutePath}/build/outputs/jar"

    libraryVariants.all { variant ->
        def buildType = variant.getBuildType().getName()
        def buildTypeName = buildType.capitalize()

        task("run${buildTypeName}CMake", type: Exec) {
            workingDir localBuildDir
            commandLine 'cmake'
            args '../../../'
        }

        task("run${buildTypeName}Make", type: Exec) {
            dependsOn "run${buildTypeName}CMake"
            workingDir localBuildDir
            commandLine 'make'
        }

        task("copy${buildTypeName}CryptoSDKLibrary", type: Copy) {
            def localPlatform
            def cryptoSDKName
            if (OperatingSystem.current().isMacOsX()) {
                localPlatform = 'mac'
                cryptoSDKName = 'libcryptosdk.dylib'
            } else if (OperatingSystem.current().isLinux()) {
                localPlatform = 'linux'
                cryptoSDKName = 'libcryptosdk.so'
            } else {
                throw new GradleException('Unsupported platform!')
            }

            from("src/main/jniLibs/${localPlatform}/")
            into(localBuildDir)
            include(cryptoSDKName)
        }

        task("create${buildTypeName}Jar", type: Copy) {
            dependsOn "copy${buildTypeName}CryptoSDKLibrary"
            from("build/intermediates/packaged-classes/${buildType}/")
            into(localBuildDir)
            include(['classes.jar'])
            rename('classes.jar', "crypto-sdk-${buildType}.jar")
        }

        assemble.dependsOn "run${buildTypeName}Make", "create${buildTypeName}Jar"
    }

    tasks.withType(Test) {
        systemProperty 'java.library.path', localBuildDir
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation fileTree(include: ['*.jar'], dir: 'build/outputs/jar')
    testImplementation 'junit:junit:4.12'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.google.code.gson:gson:2.8.4'
}
ext {
    bintrayRepo = 'orbs-network'
    bintrayName = 'orbs-network'

    publishedGroupId = 'com.orbs.sdk'
    libraryName = 'OrbsSDK'
    artifact = 'crypto-sdk'

    libraryDescription = 'Orbs Android SDK'

    siteUrl = 'https://github.com/orbs-network/orbs-network'
    gitUrl = 'https://github.com/orbs-network/orbs-network.git'

    libraryVersion = android.defaultConfig.versionName

    developerId = 'orbs'
    developerName = 'Orbs'
    developerEmail = 'androidsdk@orbs.com'

    licenseName = 'MIT'
    licenseUrl = 'https://github.com/orbs-network/orbs-network/blob/master/LICENSE'
    allLicenses = ["MIT"]
}
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
// taken from https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle
// added userOrg support
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
version = libraryVersion
Properties properties = new Properties()
String bintrayUser = ""
String bintrayApikey = ""
String bintrayUserOrg = ""
String bintrayGpgPassword = ""
if (project.rootProject.file('local.properties').canRead()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = properties.getProperty("bintray.user")
    bintrayApikey = properties.getProperty("bintray.apikey")
    bintrayUserOrg = properties.getProperty("bintray.userOrg")
    bintrayGpgPassword = properties.getProperty("bintray.gpg.password")
}
bintray {
    user = bintrayUser
    key = bintrayApikey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayUserOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayGpgPassword
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
