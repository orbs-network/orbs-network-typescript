{"version":3,"file":"service.js","sourceRoot":"","sources":["../../src/service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,6DAAmF;AACnF,mDAAkC;AAClC,6EAAmE;AAEnE;CAEC;AACD;IAoCE,YAAY,MAA+C;QACzD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,4BAAM,CAAC,IAAI,CAAC,GAAG,8BAAQ,CAAC,IAAI,mBAAmB,CAAC,CAAC;QACjD,4BAAM,CAAC,KAAK,CAAC,GAAG,8BAAQ,CAAC,IAAI,qBAAqB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACjF,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAnCD,gBAAgB;IAGH,YAAY,CAAC,GAA8B;;YACtD,4BAAM,CAAC,IAAI,CAAC,GAAG,8BAAQ,CAAC,IAAI,cAAc,GAAG,CAAC,GAAG,CAAC,aAAa,KAAK,GAAG,CAAC,GAAG,CAAC,gBAAgB,wBAAwB,CAAC,CAAC;YACtH,GAAG,CAAC,GAAG,GAAG,EAAE,aAAa,EAAE,8BAAQ,CAAC,IAAI,EAAE,gBAAgB,EAAE,8BAAQ,CAAC,OAAO,EAAE,CAAC;QACjF,CAAC;KAAA;IAED,gBAAgB;IAEV,eAAe,CAAC,IAA2B;;YAC/C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,aAAa,EAAE,8BAAQ,CAAC,IAAI,EAAE,gBAAgB,EAAE,8BAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1G,4BAAM,CAAC,IAAI,CAAC,GAAG,8BAAQ,CAAC,IAAI,8BAA8B,GAAG,CAAC,aAAa,KAAK,GAAG,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC5G,CAAC;KAAA;IAGK,qBAAqB,CAAC,GAAuC;;YACjE,MAAM,EAAC,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACxF,GAAG,CAAC,GAAG,GAAG,EAAE,MAAM,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAC,CAAC;QAC9F,CAAC;KAAA;IAED,gBAAgB;IAChB,CAAC;IAEK,IAAI;;YACR,IAAI,CAAC,KAAK,GAAG,mCAAa,CAAC,8BAAQ,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,oCAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;YACrH,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;KAAA;CASF;AAlCC;IADC,wBAAI;8DAIJ;AAUD;IADC,wBAAI;uEAIJ;AAzBH,6CA2CC","sourcesContent":["import { logger, topology, grpc, topologyPeers, types } from \"orbs-common-library\";\nimport bind from \"bind-decorator\";\nimport ERCBillingContractProxy from \"./erc-billing-contract-proxy\";\n\nclass SusbcriptionManagerServiceConfiguration {\n  ethereumContractAddress: string;\n}\nexport default class SusbcriptionManagerService {\n\n  peers: types.ClientMap;\n  private contractProxy: ERCBillingContractProxy;\n  config: SusbcriptionManagerServiceConfiguration;\n\n  // rpc interface\n\n  @bind\n  public async getHeartbeat(rpc: types.GetHeartbeatContext) {\n    logger.info(`${topology.name}: service '${rpc.req.requesterName}(v${rpc.req.requesterVersion})' asked for heartbeat`);\n    rpc.res = { responderName: topology.name, responderVersion: topology.version };\n  }\n\n  // service logic\n\n  async askForHeartbeat(peer: types.HeardbeatClient) {\n    const res = await peer.getHeartbeat({ requesterName: topology.name, requesterVersion: topology.version });\n    logger.info(`${topology.name}: received heartbeat from '${res.responderName}(v${res.responderVersion})'`);\n  }\n\n  @bind\n  async getSubscriptionStatus(rpc: types.GetSubscriptionStatusContext) {\n    const {id, tokens } = await this.contractProxy.getSubscription(rpc.req.subscriptionKey);\n    rpc.res = { active: !tokens.isGreaterThan(0), expiryTimestamp: Date.now() + 24 * 60 * 1000};\n  }\n\n  askForHeartbeats() {\n  }\n\n  async main() {\n    this.peers = topologyPeers(topology.peers);\n    this.contractProxy = new ERCBillingContractProxy(this.peers.sidechainConnector, this.config.ethereumContractAddress);\n    setInterval(() => this.askForHeartbeats(), 5000);\n  }\n\n  constructor(config: SusbcriptionManagerServiceConfiguration) {\n    this.config = config;\n    logger.info(`${topology.name}: service started`);\n    logger.debug(`${topology.name}: configuration = ${JSON.stringify(this.config)}`);\n    setTimeout(() => this.main(), 2000);\n  }\n\n}\n"]}