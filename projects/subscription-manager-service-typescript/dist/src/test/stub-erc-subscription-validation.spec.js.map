{"version":3,"file":"stub-erc-subscription-validation.spec.js","sourceRoot":"","sources":["../../../src/test/stub-erc-subscription-validation.spec.ts"],"names":[],"mappings":"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","sourcesContent":["\nconst {Assertion, expect} = require(\"chai\");\nconst Web3 = require(\"web3\");\nconst ganache = require(\"ganache-core\");\nconst path = require(\"path\");\nconst solc = require(\"solc\");\nconst child_process = require(\"child_process\");\nimport { delay } from \"bluebird\";\nimport { grpc } from \"orbs-common-library/src/grpc\";\nimport { types } from \"orbs-common-library/src/types\";\n\nconst ACTIVE_SUBSCRIPTION_ID = \"0x0213e3852b8afeb08929a0f448f2f693b0fc3ebe\";\nconst INACTIVE_SUBSCRIPTION_ID = \"0x0213e3852b8afeb08929a0f448f2f693b0fc3ebd\";\n\nasync function deployOrbsStubContract(web3: any, minTokensForSubscription: number) {\n    const STUD_ORBS_TOKEN_SOLIDITY_CONTRACT = `\n    pragma solidity 0.4.18;\n\n    contract stubOrbsToken  {\n        struct Subscription {\n            bytes32 id;\n            uint256 tokens;\n        }\n        bytes32 activeSubscriptionId;\n\n        uint256 minTokensForSubscription;\n\n        function stubOrbsToken(uint256 _minTokensForSubscription, bytes32 _activeSubscriptionId) public {\n            minTokensForSubscription = _minTokensForSubscription;\n            activeSubscriptionId = _activeSubscriptionId;\n        }\n\n        function getSubscriptionData(bytes32 _id) public view returns (bytes32 id, uint256 tokens) {\n            id = _id;\n            if(id == activeSubscriptionId) {\n                tokens = minTokensForSubscription;\n            } else {\n                tokens = 0;\n            }\n        }\n    }\n    `;\n\n    // compile contract\n    const output = solc.compile(STUD_ORBS_TOKEN_SOLIDITY_CONTRACT, 1);\n    if (output.errors)\n        throw output.errors;\n    const bytecode = output.contracts[\":stubOrbsToken\"].bytecode;\n    const abi = JSON.parse(output.contracts[\":stubOrbsToken\"].interface);\n    // deploy contract\n    const contract = new web3.eth.Contract(abi, {data: \"0x\" + bytecode});\n    const tx = contract.deploy({arguments: [minTokensForSubscription, ACTIVE_SUBSCRIPTION_ID]});\n    const account = (await web3.eth.getAccounts())[0];\n    const deployedContract = await tx.send({\n        from: account,\n        gas: await tx.estimateGas()\n    });\n    return deployedContract.options.address;\n}\n\ninterface OrbsServiceContext {\n    topology: any;\n    process: any;\n}\n\nclass OrbsService {\n    context: OrbsServiceContext;\n    topologyPath: string;\n\n    constructor(topologyPath: string) {\n        this.topologyPath = topologyPath;\n    }\n\n    public async start(opts = {}) {\n        if (this.context) {\n            throw \"already running\";\n        }\n        this.context = this.run(opts);\n        // TODO: wait by polling service state (not implemented yet in the server-side)\n        await delay(7000);\n    }\n\n    private run(args = {}, streamStdout = true) {\n        const topology = require(this.topologyPath);\n        const projectPath = path.resolve(__dirname, \"../../..\", topology.project);\n        const absoluteTopologyPath = path.resolve(__dirname, this.topologyPath);\n        const process = child_process.exec(\n            `node dist/index.js ${absoluteTopologyPath}`, {\n                async: true,\n                cwd: projectPath,\n                env: {...args, ...{NODE_ENV: \"test\"}}  // TODO: passing args in env var due a bug in nconf.argv used by the services\n            });\n        if (streamStdout) {\n            process.stdout.on(\"data\", console.log);\n        }\n        return { process, topology };\n    }\n\n    public async stop() {\n        this.context.process.kill();\n        this.context = undefined;\n    }\n}\n\nclass OrbsSubscriptionManager extends OrbsService {\n    public getClient() {\n        return grpc.subscriptionManagerClient({ endpoint: this.context.topology.endpoint });\n    }\n\n    public async start(opts: {ethereumContractAddress: string}) {\n        return super.start(opts);\n    }\n}\n\nclass OrbsSidechainConnector extends OrbsService {\n    public getClient() {\n        return grpc.subscriptionManagerClient({ endpoint: this.context.topology.endpoint });\n    }\n\n    public async start(opts: {ethereumNodeAddress: string}) {\n        return super.start(opts);\n    }\n}\n\n\nclass EthereumSimulationNode {\n    server: any;\n    port: number;\n\n    constructor() {\n        this.server = ganache.server({accounts: [{balance: \"300000000000000000000\"}], total_accounts: 1});\n    }\n\n    public getWeb3Client() {\n        return new Web3(new Web3.providers.HttpProvider(`http://localhost:${this.port}`));\n    }\n\n\n    start(port: number = 8545) {\n        if (this.port != undefined) {\n            throw \"already running\";\n        }\n        this.server.listen(port);\n        this.port = port;\n    }\n\n    stop() {\n        this.server.close();\n    }\n}\n\n\nclass TestEnvironment {\n    public readonly subscriptionManager: OrbsSubscriptionManager;\n    public readonly sidechainConnector: OrbsSidechainConnector;\n    public readonly ethereumNode: EthereumSimulationNode;\n\n\n    constructor() {\n        this.subscriptionManager = new OrbsSubscriptionManager(\"./topology/subscription-manager.json\");\n        this.sidechainConnector = new OrbsSidechainConnector(\"./topology/sidechain-connector.json\");\n        this.ethereumNode = new EthereumSimulationNode();\n    }\n}\n\n\ndescribe(\"subscription manager.getSubscriptionStatus() on a stub Orbs Ethereum contract\", () => {\n    const testEnvironment = new TestEnvironment();\n    let res;\n    let client: types.SubscriptionManagerClient;\n    before(async function() {\n        this.timeout(15000);\n        await testEnvironment.ethereumNode.start(8547);\n        const ethereumContractAddress = await deployOrbsStubContract(testEnvironment.ethereumNode.getWeb3Client(), 100);\n        await Promise.all([\n            testEnvironment.sidechainConnector.start({ethereumNodeAddress: `http://localhost:${testEnvironment.ethereumNode.port}`}),\n            testEnvironment.subscriptionManager.start({ethereumContractAddress})\n        ]);\n        client = testEnvironment.subscriptionManager.getClient();\n    });\n    it(\"should return that subscription is active if enough tokens\", async () => {\n        res = await client.getSubscriptionStatus({ subscriptionKey: ACTIVE_SUBSCRIPTION_ID });\n        expect(res).to.have.property(\"active\", true);\n    });\n    it(\"should return that subscription is inactive if not enough tokens\", async () => {\n        res = await client.getSubscriptionStatus({ subscriptionKey: INACTIVE_SUBSCRIPTION_ID });\n        expect(res).to.have.property(\"active\", false);\n    });\n\n    after(() => {\n        testEnvironment.subscriptionManager.stop();\n        testEnvironment.sidechainConnector.stop();\n        testEnvironment.ethereumNode.stop();\n    });\n});\n"]}