{"version":3,"file":"sidechain-dummy-contract.spec.js","sourceRoot":"","sources":["../../src/test/sidechain-dummy-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["\nconst {Assertion, expect} = require(\"chai\");\nconst Web3 = require(\"web3\");\nconst ganache = require(\"ganache-cli\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst solc = require(\"solc\");\n\nimport OrbsEthereumContractProxy from \"../erc-proxy\";\n\nconst SIMPLE_STORAGE_SOLIDITY_CONTRACT = `\npragma solidity 0.4.18;\n\n\n/// @title Orbs billing and subscriptions smart contract.\ncontract stubOrbsToken  {\n    struct Subscription {\n        bytes32 id;\n        uint256 tokens;\n    }\n\n    function getSubscription(bytes32 _id) public view returns (Subscription) {\n        return Subscription();\n    }\n}\n`;\n\nasync function deployContract(web3: any, initialValue: number) {\n    // compile contract\n    const output = solc.compile(SIMPLE_STORAGE_SOLIDITY_CONTRACT, 1);\n    const bytecode = output.contracts[\":SimpleStorage\"].bytecode;\n    const abi = JSON.parse(output.contracts[\":SimpleStorage\"].interface);\n    // deploy contract\n    const contract = new web3.eth.Contract(abi, {data: \"0x\" + bytecode});\n    const tx = contract.deploy({arguments: [initialValue]});\n    const account = (await web3.eth.getAccounts())[0];\n    return tx.send({\n        from: account,\n        gas: await tx.estimateGas()\n    }).then((newContractInstance: any) => {\n        return newContractInstance.options.address;\n    });\n}\n\ndescribe(\"Ethereum connector\", () => {\n    describe(\"testing connection to an Ethereum node simulator (aka Ganache)\", () => {\n    const ganacheProvider = ganache.provider({accounts: [{balance: \"300000000000000000000\"}], total_accounts: 1});\n    const web3 = new Web3(ganacheProvider);\n    const ganacheConnector = new EthereumConnector(web3);\n\n        describe(\"call to a deployed SimpleStorage contract's get() method\", () => {\n            const randomInt = Math.floor(Math.random() * 10000000);\n            let contractAddress;\n            let res;\n            before(async function() {\n                this.timeout(30000);\n                contractAddress = await deployContract(web3, randomInt);\n                res = await ganacheConnector.call(\n                    contractAddress,\n                    {name: \"get\", inputs: [], outputs: [{name: \"\", type: \"uint256\"}]},\n                    []\n                );\n            });\n            it(\"should return the value passed to the contract constructor\", () => {\n                expect(res).to.own.property(\"result\", randomInt.toString());\n            });\n            it(\"should return a valid block with a recent timestamp\", () => {\n                expect(res.block).to.exist;\n                expect(res.block).to.own.property(\"timestamp\");\n                const now = Date.now() / 1000;\n                expect(res.block.timestamp).to.be.gt(now - 600);\n                expect(res.block.timestamp).to.be.lt(now + 10);\n            });\n        });\n    });\n});\n"]}