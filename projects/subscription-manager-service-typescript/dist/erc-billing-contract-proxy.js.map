{"version":3,"file":"erc-billing-contract-proxy.js","sourceRoot":"","sources":["../src/erc-billing-contract-proxy.ts"],"names":[],"mappings":";;;;;;;;;;AACA,+CAAyC;AAOzC;IAII,YAAY,wBAAwD,EAAE,eAAuB;QACzF,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACnB,MAAM,oCAAoC,CAAC;QAC/C,CAAC;QACD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAEY,eAAe,CAAC,cAAsB;;YAC/C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC;gBACjE,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,iBAAiB,EAAE;oBACf,IAAI,EAAE,qBAAqB;oBAC3B,MAAM,EAAE;wBACJ,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE;qBACnC;oBACD,OAAO,EAAE,CAAC;4BACN,MAAM,EAAE,IAAI;4BACZ,MAAM,EAAE,SAAS;yBACpB,EAAE;4BACC,MAAM,EAAE,QAAQ;4BAChB,MAAM,EAAE,SAAS;yBACpB,CAAC;iBACL;gBACD,UAAU,EAAE,CAAC,cAAc,CAAC;aAC/B,CAAC,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,CAAC,EAAC,EAAE,EAAE,MAAM,EAAE,IAAI,wBAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QAChD,CAAC;KAAA;CACJ;AAjCD,0CAiCC","sourcesContent":["import { types, logger } from \"orbs-common-library\";\nimport { BigNumber } from \"bignumber.js\";\n\ninterface Subscription {\n    id: number;\n    tokens: BigNumber;\n}\n\nexport default class ERCBillingContractProxy {\n    sidechainConnectorClient: types.SidechainConnectorClient;\n    contractAddress: string;\n\n    constructor(sidechainConnectorClient: types.SidechainConnectorClient, contractAddress: string) {\n        this.sidechainConnectorClient = sidechainConnectorClient;\n        if (!contractAddress) {\n            throw \"contract Address must not be empty\";\n        }\n        this.contractAddress = contractAddress;\n    }\n\n    public async getSubscription(subscriptionId: string): Promise<Subscription> {\n        const res = await this.sidechainConnectorClient.callEthereumContract({\n            contractAddress: this.contractAddress,\n            functionInterface: {\n                name: \"getSubscriptionData\",\n                inputs: [\n                    { name: \"_id\", type: \"bytes32\" }\n                ],\n                outputs: [{\n                    \"name\": \"id\",\n                    \"type\": \"bytes32\",\n                }, {\n                    \"name\": \"tokens\",\n                    \"type\": \"uint256\"\n                }]\n            },\n            parameters: [subscriptionId],\n        });\n        const { id, tokens } = JSON.parse(res.resultJson);\n        return {id, tokens: new BigNumber(tokens) };\n    }\n}"]}